from aiogram import Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram_dialog import DialogManager, StartMode
import logging

from app.bot.states.start import StartSG

router = Router()
logger = logging.getLogger(__name__)


from aiogram import Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram_dialog import DialogManager, StartMode
import logging

from app.bot.states.start import StartSG
from app.infrastructure.database import DatabaseManager

router = Router()
logger = logging.getLogger(__name__)


@router.message(CommandStart())
async def start_command(message: Message, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ middleware
    db_manager: DatabaseManager = dialog_manager.middleware_data["db_manager"]
    
    user = message.from_user
    user_id = user.id
    username = user.username
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∏–¥–∏–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.first_name and user.last_name:
        visible_name = f"{user.first_name} {user.last_name}"
    elif user.first_name:
        visible_name = user.first_name
    elif user.last_name:
        visible_name = user.last_name
    elif username:
        visible_name = f"@{username}"
    else:
        visible_name = f"User {user_id}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    existing_user = await db_manager.get_user(user_id)
    
    if not existing_user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db_manager.create_user(user_id, username, visible_name)
        logger.info(f"Created new user: {user_id} ({visible_name})")
    else:
        logger.info(f"Existing user started bot: {user_id} ({visible_name})")
    
    #await dialog_manager.start(StartSG.welcome, mode=StartMode.RESET_STACK)
    from app.bot.states.main_menu import MainMenuSG
    await dialog_manager.start(MainMenuSG.main_menu, mode=StartMode.RESET_STACK)


@router.message(Command("menu"))
async def menu_command(message: Message, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    from app.bot.states.main_menu import MainMenuSG
    await dialog_manager.start(MainMenuSG.main_menu, mode=StartMode.RESET_STACK)


@router.message(Command("help"))
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    from config.config import load_config
    config = load_config()
    
    is_admin = message.from_user.id in config.logging.admin_ids
    
    help_text = (
        "ü§ñ <b>–ë–æ—Ç –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –ë—É–¥—É—â–µ–≥–æ 2025</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:\n"
        "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
        "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –¥–µ–±–∞—Ç—ã\n"
        "üó∫ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø–ª–æ—â–∞–¥–∫–µ\n"
        "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
    )
    
    if is_admin:
        help_text += (
            "\n<b>üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/debate_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –¥–µ–±–∞—Ç—ã\n"
            "/detailed_stats - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –∏–º–µ–Ω–∞–º–∏\n"
            "/user_info <user_id> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
            "/reset_user_registration <user_id> - –°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/sync_debate_cache - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–µ—à —Å –ë–î\n"
            "/sync_debates_google - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Google –¢–∞–±–ª–∏—Ü–∞–º–∏\n\n"
            "<b>üß™ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
            "/test_error - –¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞\n"
            "/test_warning - –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n"
            "/test_critical - –¢–µ—Å—Ç–æ–≤–∞—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞\n"
            "/test_exception - –¢–µ—Å—Ç–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ\n"
        )
    
    await message.answer(help_text, parse_mode="HTML")


@router.message(Command("test_error"))
async def test_error_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ERROR —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    from config.config import load_config
    config = load_config()
    
    if message.from_user.id not in config.logging.admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    logger.error(f"–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}")
    await message.answer("‚úÖ ERROR —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")


@router.message(Command("test_warning"))
async def test_warning_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WARNING —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    from config.config import load_config
    config = load_config()
    
    if message.from_user.id not in config.logging.admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6 WARNING –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä–æ–≥–∞
    for i in range(6):
        logger.warning(f"–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ #{i+1} –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}")
    
    await message.answer("‚úÖ 6 WARNING –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)")


@router.message(Command("test_critical"))
async def test_critical_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CRITICAL —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    from config.config import load_config
    config = load_config()
    
    if message.from_user.id not in config.logging.admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    logger.critical(f"–¢–µ—Å—Ç–æ–≤–∞—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}")
    await message.answer("‚úÖ CRITICAL —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")


@router.message(Command("test_exception"))
async def test_exception_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    from config.config import load_config
    config = load_config()
    
    if message.from_user.id not in config.logging.admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    await message.answer("üß™ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    # –≠—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ–π–º–∞–Ω–æ middleware –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º
    raise RuntimeError(f"–¢–µ—Å—Ç–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}")


@router.message(Command("debate_stats"))
async def debate_stats_command(message: Message, dialog_manager: DialogManager):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –¥–µ–±–∞—Ç—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    from config.config import load_config
    config = load_config()
    
    if message.from_user.id not in config.logging.admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏–∑ middleware
    db_manager = dialog_manager.middleware_data["db_manager"]
    redis_manager = dialog_manager.middleware_data["redis_manager"]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        db_counts = await db_manager.get_debate_registrations_count()
        remaining = await redis_manager.get_remaining_slots()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        stats_text = "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –¥–µ–±–∞—Ç—ã</b>\n\n"
        
        case_names = {
            1: "–í–¢–ë",
            2: "–ê–ª–∞–±—É–≥–∞", 
            3: "–ë1",
            4: "–°–µ–≤–µ—Ä—Å—Ç–∞–ª—å",
            5: "–ê–ª—å—Ñ–∞"
        }
        
        for case_num in range(1, 6):
            name = case_names[case_num]
            registered = db_counts[case_num]
            remaining_count = remaining[case_num]
            
            stats_text += f"<b>{name}:</b> {registered} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ, {remaining_count} —Å–≤–æ–±–æ–¥–Ω–æ\n"
        
        # –û–±—â–∏–µ –ª–∏–º–∏—Ç—ã
        stats_text += "\n<b>–û–±—â–∏–µ –ª–∏–º–∏—Ç—ã:</b>\n"
        stats_text += f"–í–¢–ë: {db_counts[1]}/32\n"
        stats_text += f"–ê–ª–∞–±—É–≥–∞ + –ë1: {db_counts[2] + db_counts[3]}/41\n"
        stats_text += f"–°–µ–≤–µ—Ä—Å—Ç–∞–ª—å + –ê–ª—å—Ñ–∞: {db_counts[4] + db_counts[5]}/42\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_registered = sum(db_counts.values())
        stats_text += f"\n<b>–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ:</b> {total_registered}"
        
        await message.answer(stats_text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error getting debate stats: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.message(Command("reset_user_registration"))
async def reset_user_registration_command(message: Message, dialog_manager: DialogManager):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    from config.config import load_config
    config = load_config()
    
    if message.from_user.id not in config.logging.admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    command_parts = message.text.split()
    if len(command_parts) != 2:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reset_user_registration <user_id>\n"
            "–ü—Ä–∏–º–µ—Ä: /reset_user_registration 123456789"
        )
        return
    
    try:
        target_user_id = int(command_parts[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏–∑ middleware
    db_manager = dialog_manager.middleware_data["db_manager"]
    redis_manager = dialog_manager.middleware_data["redis_manager"]
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        user = await db_manager.get_user(target_user_id)
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if not user.debate_reg:
            await message.answer(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –¥–µ–±–∞—Ç—ã")
            return
        
        old_case = user.debate_reg
        case_name = await redis_manager.get_case_name(old_case)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –ë–î
        await db_manager.update_user_debate_registration(target_user_id, None)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º Redis —Å –ë–î
        db_counts = await db_manager.get_debate_registrations_count()
        await redis_manager.sync_with_database(db_counts)
        
        await message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –Ω–∞ –∫–µ–π—Å {case_name} —Å–±—Ä–æ—à–µ–Ω–∞",
            parse_mode="HTML"
        )
        
        logger.info(f"Admin {message.from_user.id} reset registration for user {target_user_id} from case {old_case}")
        
    except Exception as e:
        logger.error(f"Error resetting user registration: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")


@router.message(Command("sync_debate_cache"))
async def sync_debate_cache_command(message: Message, dialog_manager: DialogManager):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Redis –∫–µ—à–∞ —Å –ë–î"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    from config.config import load_config
    config = load_config()
    
    if message.from_user.id not in config.logging.admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏–∑ middleware
    db_manager = dialog_manager.middleware_data["db_manager"]
    redis_manager = dialog_manager.middleware_data["redis_manager"]
    
    try:
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º Redis —Å –ë–î
        db_counts = await db_manager.get_debate_registrations_count()
        await redis_manager.sync_with_database(db_counts)
        
        await message.answer(
            f"‚úÖ –ö–µ—à —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n"
            f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {db_counts}",
            parse_mode="HTML"
        )
        
        logger.info(f"Admin {message.from_user.id} manually synced debate cache")
        
    except Exception as e:
        logger.error(f"Error syncing debate cache: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–µ—à–∞")


@router.message(Command("detailed_stats"))
async def detailed_stats_command(message: Message, dialog_manager: DialogManager):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    from config.config import load_config
    config = load_config()
    
    if message.from_user.id not in config.logging.admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏–∑ middleware
    db_manager = dialog_manager.middleware_data["db_manager"]
    redis_manager = dialog_manager.middleware_data["redis_manager"]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_users = await db_manager.get_total_users_count()
        registered_users = await db_manager.get_registered_users_count()
        db_counts = await db_manager.get_debate_registrations_count()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        stats_text = "<b>üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
        
        # –û–±—â–∏–µ —Ü–∏—Ñ—Ä—ã
        stats_text += f"<b>üë• –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        stats_text += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        stats_text += f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –¥–µ–±–∞—Ç—ã: {registered_users}\n"
        stats_text += f"–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {total_users - registered_users}\n\n"
        
        # –ü–æ –∫–µ–π—Å–∞–º
        case_names = {
            1: "–í–¢–ë",
            2: "–ê–ª–∞–±—É–≥–∞", 
            3: "–ë1",
            4: "–°–µ–≤–µ—Ä—Å—Ç–∞–ª—å",
            5: "–ê–ª—å—Ñ–∞"
        }
        
        stats_text += "<b>üéØ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–µ–π—Å–∞–º:</b>\n"
        for case_num in range(1, 6):
            name = case_names[case_num]
            count = db_counts[case_num]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –∫–µ–π—Å–∞
            users_in_case = await db_manager.get_users_by_debate_case(case_num)
            
            stats_text += f"<b>{name}:</b> {count} —á–µ–ª.\n"
            
            if users_in_case:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                user_list = []
                for i, user in enumerate(users_in_case[:3]):
                    display_name = user.visible_name or f"User {user.id}"
                    user_list.append(f"  ‚Ä¢ {display_name}")
                
                stats_text += "\n".join(user_list)
                
                if len(users_in_case) > 3:
                    stats_text += f"\n  ‚Ä¢ ... –∏ –µ—â–µ {len(users_in_case) - 3}"
                
                stats_text += "\n"
            
            stats_text += "\n"
        
        # –õ–∏–º–∏—Ç—ã
        stats_text += "<b>üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤:</b>\n"
        vtb_used = (db_counts[1] / 32) * 100
        alabuga_b1_used = ((db_counts[2] + db_counts[3]) / 41) * 100
        severstal_alpha_used = ((db_counts[4] + db_counts[5]) / 42) * 100
        
        stats_text += f"–í–¢–ë: {db_counts[1]}/32 ({vtb_used:.1f}%)\n"
        stats_text += f"–ê–ª–∞–±—É–≥–∞+–ë1: {db_counts[2] + db_counts[3]}/41 ({alabuga_b1_used:.1f}%)\n"
        stats_text += f"–°–µ–≤–µ—Ä—Å—Ç–∞–ª—å+–ê–ª—å—Ñ–∞: {db_counts[4] + db_counts[5]}/42 ({severstal_alpha_used:.1f}%)\n"
        
        await message.answer(stats_text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error getting detailed stats: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.message(Command("user_info"))
async def user_info_command(message: Message, dialog_manager: DialogManager):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    from config.config import load_config
    config = load_config()
    
    if message.from_user.id not in config.logging.admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    command_parts = message.text.split()
    if len(command_parts) != 2:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_info <user_id>\n"
            "–ü—Ä–∏–º–µ—Ä: /user_info 123456789"
        )
        return
    
    try:
        target_user_id = int(command_parts[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏–∑ middleware
    db_manager = dialog_manager.middleware_data["db_manager"]
    redis_manager = dialog_manager.middleware_data["redis_manager"]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await db_manager.get_user(target_user_id)
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        info_text = f"<b>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
        info_text += f"<b>ID:</b> {user.id}\n"
        info_text += f"<b>Username:</b> @{user.username}\n" if user.username else "<b>Username:</b> ‚Äî\n"
        info_text += f"<b>Visible Name:</b> {user.visible_name}\n"
        
        if user.debate_reg:
            case_name = await redis_manager.get_case_name(user.debate_reg)
            info_text += f"<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –¥–µ–±–∞—Ç—ã:</b> –ö–µ–π—Å {user.debate_reg} ({case_name})\n"
        else:
            info_text += f"<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –¥–µ–±–∞—Ç—ã:</b> –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n"
        
        await message.answer(info_text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error getting user info: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")


@router.message(Command("sync_debates_google"))
async def sync_debates_google_command(message: Message, dialog_manager: DialogManager):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Google –¢–∞–±–ª–∏—Ü–∞–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    from config.config import load_config
    config = load_config()

    additional_admins = [1497469650,860487502,474503734]
    
    if message.from_user.id not in config.logging.admin_ids and message.from_user.id not in additional_admins:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏–∑ middleware
    db_manager = dialog_manager.middleware_data["db_manager"]
    redis_manager = dialog_manager.middleware_data["redis_manager"]
    google_sheets_manager = dialog_manager.middleware_data["google_sheets_manager"]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    status_message = await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Google –¢–∞–±–ª–∏—Ü–∞–º–∏...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_data = await db_manager.get_all_users_for_export()
        db_counts = await db_manager.get_debate_registrations_count()
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Google Sheets
        success = await google_sheets_manager.sync_debate_data(users_data, db_counts)
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            success_text = (
                "‚úÖ <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}\n"
                f"üìù –õ–∏—Å—Ç MAIN –æ–±–Ω–æ–≤–ª–µ–Ω\n\n"
                f"üìã –¢–∞–±–ª–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            )
            
            await status_message.edit_text(success_text, parse_mode="HTML")
        else:
            await status_message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                "‚Ä¢ –§–∞–π–ª google_credentials.json\n"
                "‚Ä¢ ID —Ç–∞–±–ª–∏—Ü—ã –≤ .env\n"
                "‚Ä¢ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ\n\n"
                "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö –±–æ—Ç–∞.",
                parse_mode="HTML"
            )
        
        logger.info(f"Admin {message.from_user.id} requested Google Sheets sync, result: {success}")
        
    except Exception as e:
        logger.error(f"Error during Google Sheets sync: {e}")
        await status_message.edit_text(
            "‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</b>\n\n"
            f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö: {str(e)[:100]}...",
            parse_mode="HTML"
        )
