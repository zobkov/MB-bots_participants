"""
–°–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ERROR/CRITICAL –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, WARNING - –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞.
"""

import asyncio
import logging
import time
import contextvars
from collections import deque
from typing import Any, Dict, List

from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest, TelegramRetryAfter


# –ö–æ–Ω—Ç–µ–∫—Å—Ç –ª–æ–≥–æ–≤ –∏–∑ middleware
log_ctx: contextvars.ContextVar[Dict[str, Any]] = contextvars.ContextVar("log_ctx", default={})

# –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ Telegram
LOG_QUEUE: asyncio.Queue[Dict[str, Any]] = asyncio.Queue()


class ContextFilter(logging.Filter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ middleware –≤ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤."""
    
    def filter(self, record: logging.LogRecord) -> bool:
        ctx = log_ctx.get({})
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è (–±—É–¥—É—Ç "-" –µ—Å–ª–∏ –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π)
        record.user_id = ctx.get("user_id", "-")
        record.chat_id = ctx.get("chat_id", "-")
        record.update_type = ctx.get("update_type", "-")
        record.handler = ctx.get("handler", "-")
        return True


async def log_worker(bot: Bot, admin_ids: List[int]):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∞–º.
    –ù–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∑–∞—â–∏—â–µ–Ω –æ—Ç rate-limit.
    """
    logger = logging.getLogger(__name__)
    
    while True:
        try:
            message_data = await LOG_QUEUE.get()
            text = message_data["text"]
            level = message_data["level"]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è
            emoji = {
                "WARNING": "‚ö†Ô∏è",
                "ERROR": "‚ùå", 
                "CRITICAL": "üö®"
            }.get(level, "üìù")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            formatted_text = f"{emoji} {level}\n{text}"
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –ª–∏–º–∏—Ç–∞ Telegram
            if len(formatted_text) > 4096:
                formatted_text = formatted_text[:4000] + "\n...(–æ–±—Ä–µ–∑–∞–Ω–æ)"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            for admin_id in admin_ids:
                try:
                    await bot.send_message(
                        chat_id=admin_id,
                        text=formatted_text,
                        disable_web_page_preview=True,
                        parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    )
                except TelegramRetryAfter as e:
                    # –ñ–¥–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–∏ rate-limit
                    await asyncio.sleep(e.retry_after)
                    try:
                        await bot.send_message(
                            chat_id=admin_id,
                            text=formatted_text,
                            disable_web_page_preview=True,
                            parse_mode=None
                        )
                    except Exception as retry_error:
                        logger.error(f"Failed to send log to admin {admin_id} after retry: {retry_error}")
                        
                except TelegramBadRequest as e:
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç)
                    logger.warning(f"Cannot send log to admin {admin_id}: {e}")
                    
                except Exception as e:
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏ –±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏
                    logger.error(f"Unexpected error sending log to admin {admin_id}: {e}")
                    
        except Exception as e:
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ —Å–∞–º–æ–º –≤–æ—Ä–∫–µ—Ä–µ
            print(f"[log_worker] Critical error: {e}", flush=True)
            
        finally:
            LOG_QUEUE.task_done()


class TelegramLogHandler(logging.Handler):
    """
    Handler –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ Telegram.
    - ERROR/CRITICAL –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    - WARNING –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ 5 –∑–∞ –º–∏–Ω—É—Ç—É
    """
    
    def __init__(self, level=logging.WARNING):
        super().__init__(level)
        self._warn_times = deque()      # WARNING –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥
        self._last_warn_summary = 0.0   # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–æ–¥–∫–∏ WARNING
        self._warn_threshold = 5        # –õ–∏–º–∏—Ç WARNING –∑–∞ –º–∏–Ω—É—Ç—É
        self._warn_window = 60          # –û–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    def emit(self, record: logging.LogRecord) -> None:
        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏ —Å–∞–º–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–∏
            if record.name == __name__:
                return
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = self.format(record)
            now = time.monotonic()
            
            if record.levelno >= logging.ERROR:
                # ERROR/CRITICAL –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                try:
                    loop = asyncio.get_running_loop()
                    loop.call_soon_threadsafe(
                        LOG_QUEUE.put_nowait,
                        {
                            "text": msg,
                            "level": record.levelname,
                            "timestamp": now
                        }
                    )
                except RuntimeError:
                    # –ï—Å–ª–∏ –Ω–µ—Ç running loop (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ç–µ—Å—Ç–∞—Ö)
                    pass
                    
            elif record.levelno == logging.WARNING:
                # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º WARNING –∑–∞ –æ–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
                self._warn_times.append(now)
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (> 60 —Å–µ–∫—É–Ω–¥)
                while self._warn_times and now - self._warn_times[0] > self._warn_window:
                    self._warn_times.popleft()
                
                # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–æ–¥–∫–∏
                if (len(self._warn_times) > self._warn_threshold and 
                    (now - self._last_warn_summary) >= self._warn_window):
                    
                    self._last_warn_summary = now
                    summary_msg = (
                        f"WARNING –Ω–∞–∫–æ–ø–∏–ª–∏—Å—å: {len(self._warn_times)} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É.\n"
                        f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ: {msg}\n"
                        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."
                    )
                    
                    try:
                        loop = asyncio.get_running_loop()
                        loop.call_soon_threadsafe(
                            LOG_QUEUE.put_nowait,
                            {
                                "text": summary_msg,
                                "level": "WARNING",
                                "timestamp": now
                            }
                        )
                    except RuntimeError:
                        pass
                        
        except Exception:
            # –ù–µ –¥–∞–µ–º handler'—É —É–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
            pass


async def start_log_worker(bot: Bot, admin_ids: List[int]) -> asyncio.Task:
    """–ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤."""
    if not admin_ids:
        logger = logging.getLogger(__name__)
        logger.warning("No admin IDs configured, log notifications disabled")
        return None
        
    task = asyncio.create_task(log_worker(bot, admin_ids))
    logger = logging.getLogger(__name__)
    logger.info(f"Started log worker for {len(admin_ids)} admin(s): {admin_ids}")
    return task


def setup_telegram_logging(admin_ids: List[int]) -> TelegramLogHandler:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram handler –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç handler, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –ª–æ–≥–≥–µ—Ä—É.
    """
    if not admin_ids:
        return None
        
    # –°–æ–∑–¥–∞–µ–º Telegram handler
    telegram_handler = TelegramLogHandler(level=logging.WARNING)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram
    telegram_formatter = logging.Formatter(
        "%(name)s | %(message)s\n"
        "user=%(user_id)s chat=%(chat_id)s upd=%(update_type)s handler=%(handler)s"
    )
    telegram_handler.setFormatter(telegram_formatter)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    telegram_handler.addFilter(ContextFilter())
    
    return telegram_handler


def get_log_context() -> contextvars.ContextVar:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ª–æ–≥–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ middleware."""
    return log_ctx