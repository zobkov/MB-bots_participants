#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–æ–≤.
"""

import asyncio
import logging
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config.config import load_config
from app.infrastructure.logging import setup_logging
from app.infrastructure.telegram_logging import start_log_worker, get_log_context
from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode


async def test_notifications():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    
    if not config.logging.admin_ids:
        print("‚ùå ADMIN_IDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
        print("–î–æ–±–∞–≤—å—Ç–µ ADMIN_IDS=your_user_id –≤ .env —Ñ–∞–π–ª")
        return
    
    print(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    print(f"üì± –ê–¥–º–∏–Ω—ã: {config.logging.admin_ids}")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging(
        log_level=config.logging.level,
        log_dir=config.logging.log_dir,
        console_output=config.logging.console_output,
        file_prefix=config.logging.file_prefix,
        admin_ids=config.logging.admin_ids
    )
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    bot = Bot(
        token=config.tg_bot.token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    log_worker_task = await start_log_worker(bot, config.logging.admin_ids)
    
    try:
        print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        log_ctx = get_log_context()
        test_context = {
            "user_id": 123456789,
            "chat_id": -100123456789,
            "update_type": "Message",
            "handler": "test_handler"
        }
        
        token = log_ctx.set(test_context)
        
        try:
            logger = logging.getLogger("test")
            
            print("üì§ –¢–µ—Å—Ç–∏—Ä—É–µ–º ERROR —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")
            logger.error("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            await asyncio.sleep(2)
            
            print("üì§ –¢–µ—Å—Ç–∏—Ä—É–µ–º CRITICAL —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")
            logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            await asyncio.sleep(2)
            
            print("üì§ –¢–µ—Å—Ç–∏—Ä—É–µ–º WARNING –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ (6 —à—Ç—É–∫)...")
            for i in range(6):
                logger.warning(f"–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ #{i+1}")
                await asyncio.sleep(0.5)
            
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
            await asyncio.sleep(5)
            
            print("‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram - –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å:")
            print("  ‚Ä¢ 1 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ERROR")  
            print("  ‚Ä¢ 1 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ CRITICAL")
            print("  ‚Ä¢ 1 —Å–≤–æ–¥–∫—É WARNING (6 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π)")
            
        finally:
            log_ctx.reset(token)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä
        if log_worker_task and not log_worker_task.done():
            log_worker_task.cancel()
            try:
                await log_worker_task
            except asyncio.CancelledError:
                pass
        
        await bot.session.close()


async def test_warning_threshold():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ WARNING —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    config = load_config()
    
    if not config.logging.admin_ids:
        print("‚ùå ADMIN_IDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
        return
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ WARNING (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >5 –∑–∞ –º–∏–Ω—É—Ç—É)...")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging(
        log_level="WARNING",  # –¢–æ–ª—å–∫–æ WARNING –∏ –≤—ã—à–µ
        log_dir=config.logging.log_dir,
        console_output=True,
        file_prefix="test-warning",
        admin_ids=config.logging.admin_ids
    )
    
    bot = Bot(
        token=config.tg_bot.token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    
    log_worker_task = await start_log_worker(bot, config.logging.admin_ids)
    
    try:
        logger = logging.getLogger("warning_test")
        
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 4 WARNING (–Ω–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)...")
        for i in range(4):
            logger.warning(f"WARNING —Ç–µ—Å—Ç #{i+1} (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)")
            await asyncio.sleep(1)
        
        await asyncio.sleep(3)
        print("‚úÖ 4 WARNING –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ)")
        
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—â–µ 2 WARNING (–¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)...")
        for i in range(2):
            logger.warning(f"WARNING —Ç–µ—Å—Ç #{i+5} (–¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)")
            await asyncio.sleep(1)
        
        await asyncio.sleep(5)
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ 6 WARNING")
        
    finally:
        if log_worker_task and not log_worker_task.done():
            log_worker_task.cancel()
            try:
                await log_worker_task
            except asyncio.CancelledError:
                pass
        
        await bot.session.close()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Test admin notifications")
    parser.add_argument("--warnings-only", action="store_true", 
                       help="Test only WARNING threshold")
    
    args = parser.parse_args()
    
    if args.warnings_only:
        await test_warning_threshold()
    else:
        await test_notifications()


if __name__ == "__main__":
    asyncio.run(main())