#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config.config import load_config
from app.infrastructure.logging import setup_logging
import logging


def test_logging_levels():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging(
        log_level=config.logging.level,
        log_dir=config.logging.log_dir,
        console_output=config.logging.console_output,
        file_prefix=config.logging.file_prefix
    )
    
    print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—Ä–æ–≤–Ω–µ–º: {config.logging.level}")
    print(f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {config.logging.log_dir}")
    print(f"–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥: {config.logging.console_output}")
    print("-" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —É—Ä–æ–≤–Ω–∏
    logging.debug("üîç DEBUG: –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    logging.info("‚ÑπÔ∏è INFO: –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ")
    logging.warning("‚ö†Ô∏è WARNING: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö")
    logging.error("‚ùå ERROR: –û—à–∏–±–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É")
    logging.critical("üö® CRITICAL: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!")
    
    print("-" * 60)
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è
    levels = ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']
    current_level_index = levels.index(config.logging.level.upper())
    
    print(f"\n–ü—Ä–∏ —É—Ä–æ–≤–Ω–µ {config.logging.level} –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è:")
    for i, level in enumerate(levels):
        if i >= current_level_index:
            print(f"  ‚úÖ {level}")
        else:
            print(f"  ‚ùå {level} (—Å–∫—Ä—ã—Ç–æ)")


def test_different_levels():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    levels = ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']
    
    for level in levels:
        print(f"\n{'='*60}")
        print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è: {level}")
        print('='*60)
        
        setup_logging(
            log_level=level,
            log_dir="logs",
            console_output=True,
            file_prefix=f"test-{level.lower()}"
        )
        
        logging.debug(f"DEBUG —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —É—Ä–æ–≤–Ω–µ {level}")
        logging.info(f"INFO —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —É—Ä–æ–≤–Ω–µ {level}")
        logging.warning(f"WARNING —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —É—Ä–æ–≤–Ω–µ {level}")
        logging.error(f"ERROR —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —É—Ä–æ–≤–Ω–µ {level}")
        logging.critical(f"CRITICAL —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —É—Ä–æ–≤–Ω–µ {level}")


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Test logging levels")
    parser.add_argument("--all-levels", action="store_true", 
                       help="Test all logging levels")
    
    args = parser.parse_args()
    
    if args.all_levels:
        test_different_levels()
    else:
        test_logging_levels()