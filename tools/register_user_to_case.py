#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥–µ–±–∞—Ç-–∫–µ–π—Å
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python register_user_to_case.py <user_id> <case_number>
"""

import asyncio
import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.infrastructure.database.database import DatabaseManager
from app.infrastructure.database.redis_manager import RedisManager
from config.config import load_config


async def register_user_to_case(user_id: int, case_number: int):
    """
    –ó–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–µ–π—Å —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        case_number: –ù–æ–º–µ—Ä –∫–µ–π—Å–∞ (1-5)
    """
    print(f"üéØ –ù–∞—á–∏–Ω–∞—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –∫–µ–π—Å {case_number}...")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not (1 <= case_number <= 5):
        print("‚ùå –û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –∫–µ–π—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")
        return False
    
    config = load_config()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    db_manager = DatabaseManager(config.db)
    await db_manager.init()
    
    redis_manager = RedisManager(config.redis)
    await redis_manager.init()
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = await db_manager.get_user(user_id)
        if not user:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            print("üí° –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start –≤ –±–æ—Ç–µ")
            return False
        
        print(f"üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.visible_name}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.debate_reg:
            old_case_name = await redis_manager.get_case_name(user.debate_reg)
            print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –∫–µ–π—Å {user.debate_reg} ({old_case_name})")
            
            response = input("–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–æ–≤—ã–π –∫–µ–π—Å? (y/N): ")
            if response.lower() != 'y':
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return False
        
        # 3. –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–µ–π—Å–∞
        case_name = await redis_manager.get_case_name(case_number)
        print(f"üìù –ö–µ–π—Å: {case_name}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        can_register, reason = await redis_manager.can_register_for_case(case_number)
        if not can_register:
            print(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∫–µ–π—Å {case_number}: {reason}")
            return False
        
        print(f"‚úÖ –°–ª–æ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∫–µ–π—Å–∞ {case_number}")
        
        # 5. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Å–ª–æ—Ç
        if user.debate_reg:
            print(f"üîÑ –û—Å–≤–æ–±–æ–∂–¥–∞—é —Å–ª–æ—Ç –≤ –∫–µ–π—Å–µ {user.debate_reg}...")
            await redis_manager.unregister_from_case(user.debate_reg)
        
        # 6. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–æ–≤—ã–π –∫–µ–π—Å
        print(f"üì• –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –Ω–∞ –∫–µ–π—Å {case_number}...")
        success = await redis_manager.register_for_case(case_number)
        
        if not success:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∫–µ–π—Å {case_number} (—Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã)")
            
            # –ï—Å–ª–∏ –±—ã–ª–∞ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ä—ã–π —Å–ª–æ—Ç
            if user.debate_reg:
                print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...")
                await redis_manager.register_for_case(user.debate_reg)
            
            return False
        
        # 7. –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        print("üíæ –û–±–Ω–æ–≤–ª—è—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        await db_manager.update_user_debate_registration(user_id, case_number)
        
        # 8. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å Redis —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏)
        print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é –∫—ç—à —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
        db_counts = await db_manager.get_debate_registrations_count()
        await redis_manager.sync_with_database(db_counts)
        
        # 9. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        updated_user = await db_manager.get_user(user_id)
        if updated_user.debate_reg == case_number:
            remaining_slots = await redis_manager.get_remaining_slots()
            
            print(f"üéâ –£–°–ü–ï–•! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –∫–µ–π—Å {case_number}")
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {updated_user.visible_name} (ID: {user_id})")
            print(f"üìù –ö–µ–π—Å: {case_name}")
            print(f"üéØ –û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–µ–π—Å–∞: {remaining_slots[case_number]}")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print(f"\nüìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
            case_names = {
                1: "–í–¢–ë",
                2: "–ê–ª–∞–±—É–≥–∞", 
                3: "–ë1",
                4: "–°–µ–≤–µ—Ä—Å—Ç–∞–ª—å",
                5: "–ê–ª—å—Ñ–∞"
            }
            
            for i in range(1, 6):
                name = case_names[i]
                registered = db_counts[i]
                remaining = remaining_slots[i]
                print(f"  {name}: {registered} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ, {remaining} —Å–≤–æ–±–æ–¥–Ω–æ")
            
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    finally:
        # –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await redis_manager.close()


async def show_user_info(user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    config = load_config()
    
    db_manager = DatabaseManager(config.db)
    await db_manager.init()
    
    redis_manager = RedisManager(config.redis)
    await redis_manager.init()
    
    try:
        user = await db_manager.get_user(user_id)
        if not user:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"\nüë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:")
        print(f"ID: {user.id}")
        print(f"Username: @{user.username}" if user.username else "Username: ‚Äî")
        print(f"Visible Name: {user.visible_name}")
        
        if user.debate_reg:
            case_name = await redis_manager.get_case_name(user.debate_reg)
            print(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –ö–µ–π—Å {user.debate_reg} ({case_name})")
        else:
            print("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    finally:
        await redis_manager.close()


async def show_stats():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    config = load_config()
    
    db_manager = DatabaseManager(config.db)
    await db_manager.init()
    
    redis_manager = RedisManager(config.redis)
    await redis_manager.init()
    
    try:
        db_counts = await db_manager.get_debate_registrations_count()
        remaining_slots = await redis_manager.get_remaining_slots()
        
        case_names = {
            1: "–í–¢–ë",
            2: "–ê–ª–∞–±—É–≥–∞", 
            3: "–ë1",
            4: "–°–µ–≤–µ—Ä—Å—Ç–∞–ª—å",
            5: "–ê–ª—å—Ñ–∞"
        }
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –¥–µ–±–∞—Ç—ã:")
        for i in range(1, 6):
            name = case_names[i]
            registered = db_counts[i]
            remaining = remaining_slots[i]
            total = registered + remaining
            print(f"  {name}: {registered}/{total} ({remaining} —Å–≤–æ–±–æ–¥–Ω–æ)")
        
        total_registered = sum(db_counts.values())
        print(f"\n–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_registered}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    finally:
        await redis_manager.close()


def print_usage():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    print("üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print("  python register_user_to_case.py <user_id> <case_number>  - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("  python register_user_to_case.py info <user_id>          - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
    print("  python register_user_to_case.py stats                   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    print("  python register_user_to_case.py help                    - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
    print()
    print("–ü—Ä–∏–º–µ—Ä—ã:")
    print("  python register_user_to_case.py 123456789 1  # –ó–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 123456789 –Ω–∞ –∫–µ–π—Å 1 (–í–¢–ë)")
    print("  python register_user_to_case.py info 123456789  # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
    print()
    print("–ö–µ–π—Å—ã:")
    print("  1 - –í–¢–ë")
    print("  2 - –ê–ª–∞–±—É–≥–∞")
    print("  3 - –ë1")
    print("  4 - –°–µ–≤–µ—Ä—Å—Ç–∞–ª—å")
    print("  5 - –ê–ª—å—Ñ–∞")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print_usage()
        return
    
    command = sys.argv[1].lower()
    
    if command == "help":
        print_usage()
        return
    
    elif command == "stats":
        await show_stats()
        return
    
    elif command == "info":
        if len(sys.argv) != 3:
            print("‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ user_id")
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python register_user_to_case.py info <user_id>")
            return
        
        try:
            user_id = int(sys.argv[2])
            await show_user_info(user_id)
        except ValueError:
            print("‚ùå –û—à–∏–±–∫–∞: user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if len(sys.argv) != 3:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        print_usage()
        return
    
    try:
        user_id = int(sys.argv[1])
        case_number = int(sys.argv[2])
        
        success = await register_user_to_case(user_id, case_number)
        if success:
            print("\n‚ú® –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\nüí• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            sys.exit(1)
            
    except ValueError:
        print("‚ùå –û—à–∏–±–∫–∞: user_id –∏ case_number –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        print_usage()
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())