#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ StaticMedia –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏.
–ó–∞–º–µ–Ω—è–µ—Ç StaticMedia(path="...") –Ω–∞ create_optimized_static_media("...").

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python migrate_static_media.py [--dry-run] [--file=path/to/file.py]
"""

import argparse
import os
import re
import sys
from pathlib import Path
from typing import List, Tuple


def find_static_media_usage(file_path: Path) -> List[Tuple[int, str, str, str]]:
    """
    –ù–∞–π—Ç–∏ –≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è StaticMedia –≤ —Ñ–∞–π–ª–µ.
    
    Returns:
        List of (line_number, original_line, path_in_line, relative_path)
    """
    matches = []
    
    if not file_path.exists():
        return matches
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {file_path}: {e}")
        return matches
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ StaticMedia —Å path
    pattern = r'StaticMedia\s*\(\s*path\s*=\s*["\']([^"\']+)["\']'
    
    for line_num, line in enumerate(lines, 1):
        match = re.search(pattern, line)
        if match:
            path_in_code = match.group(1)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –ø–∞–ø–∫–∏ images
            if "app/bot/assets/images/" in path_in_code:
                relative_path = path_in_code.replace("app/bot/assets/images/", "")
                matches.append((line_num, line.strip(), path_in_code, relative_path))
    
    return matches


def migrate_file(file_path: Path, dry_run: bool = False) -> bool:
    """
    –ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.
    
    Returns:
        True –µ—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
    """
    matches = find_static_media_usage(file_path)
    
    if not matches:
        return False
    
    print(f"üìÅ –§–∞–π–ª: {file_path}")
    print(f"   –ù–∞–π–¥–µ–Ω–æ {len(matches)} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π StaticMedia")
    
    if dry_run:
        for line_num, original_line, path_in_code, relative_path in matches:
            print(f"   –°—Ç—Ä–æ–∫–∞ {line_num}: {original_line}")
            print(f"   ‚Üí create_optimized_static_media(\"{relative_path}\")")
        return False
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        return False
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
    modified = False
    
    for _, _, path_in_code, relative_path in matches:
        escaped_path = re.escape(path_in_code)
        old_pattern = r'StaticMedia\(\s*path\s*=\s*["\']' + escaped_path + r'["\']\s*\)'
        new_replacement = f'create_optimized_static_media("{relative_path}")'
        
        new_content = re.sub(old_pattern, new_replacement, content)
        
        if new_content != content:
            content = new_content
            modified = True
            print(f"   ‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ: {path_in_code} ‚Üí {relative_path}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    import_line = "from app.utils.optimized_dialog_widgets import create_optimized_static_media"
    
    if import_line not in content and modified:
        # –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞ (–ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤)
        lines = content.split('\n')
        insert_pos = 0
        
        for i, line in enumerate(lines):
            if line.strip().startswith('from ') or line.strip().startswith('import '):
                insert_pos = i + 1
        
        lines.insert(insert_pos, import_line)
        content = '\n'.join(lines)
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    if modified:
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"   üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False
    
    return modified


def find_dialog_files() -> List[Path]:
    """–ù–∞–π—Ç–∏ –≤—Å–µ —Ñ–∞–π–ª—ã –¥–∏–∞–ª–æ–≥–æ–≤"""
    dialog_paths = []
    
    dialogs_dir = Path("app/bot/dialogs")
    if dialogs_dir.exists():
        for py_file in dialogs_dir.rglob("*.py"):
            dialog_paths.append(py_file)
    
    return dialog_paths


def main():
    parser = argparse.ArgumentParser(description="–ú–∏–≥—Ä–∞—Ü–∏—è StaticMedia –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏")
    parser.add_argument("--dry-run", action="store_true", help="–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ")
    parser.add_argument("--file", help="–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª")
    
    args = parser.parse_args()
    
    if args.file:
        files_to_process = [Path(args.file)]
    else:
        files_to_process = find_dialog_files()
    
    if not files_to_process:
        print("‚ùå –§–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(files_to_process)}")
    
    if args.dry_run:
        print("üß™ –†–µ–∂–∏–º dry-run: –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    
    print()
    
    modified_count = 0
    total_files_with_changes = 0
    
    for file_path in files_to_process:
        matches = find_static_media_usage(file_path)
        
        if matches:
            total_files_with_changes += 1
            modified_count += len(matches)
            
            if migrate_file(file_path, args.dry_run):
                print(f"‚úÖ {file_path} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω")
            elif args.dry_run:
                print(f"üîç {file_path} –±—É–¥–µ—Ç –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω")
            print()
    
    print("üìä –ò—Ç–æ–≥–∏:")
    print(f"   –§–∞–π–ª–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏: {total_files_with_changes}")
    print(f"   –í—Å–µ–≥–æ –∑–∞–º–µ–Ω: {modified_count}")
    
    if not args.dry_run and total_files_with_changes > 0:
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üìã –ù–µ –∑–∞–±—É–¥—å—Ç–µ:")
        print("   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        print("   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤")
    elif args.dry_run and total_files_with_changes > 0:
        print(f"\nüîÑ –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print(f"   python {sys.argv[0]} # –±–µ–∑ --dry-run")


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    if not Path("app/bot/dialogs").exists():
        print("‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞")
        sys.exit(1)
    
    main()
