#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç –∏–∑ Redis
"""

import asyncio
import json
import csv
import logging
from datetime import datetime
from collections import defaultdict
from analyze_redis_dialogs import RedisDialogAnalyzer, RedisConfig

logger = logging.getLogger(__name__)

async def generate_summary_report(analyzer: RedisDialogAnalyzer, label: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    user_states = await analyzer.analyze_all_dialogs()
    
    if not user_states:
        print(f"üìã –û—Ç—á–µ—Ç –¥–ª—è {label}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    completion_ranges = defaultdict(list)
    state_counts = defaultdict(int)
    missing_field_counts = defaultdict(int)
    
    for user_state in user_states:
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
        completion = user_state.completion_percentage
        if completion <= 25:
            completion_ranges['üî¥ –ö—Ä–∏—Ç–∏—á–Ω–æ (0-25%)'].append(user_state)
        elif completion <= 50:
            completion_ranges['üü° –ù–∏–∑–∫–æ (25-50%)'].append(user_state)
        elif completion <= 75:
            completion_ranges['üü† –°—Ä–µ–¥–Ω–µ (50-75%)'].append(user_state)
        else:
            completion_ranges['üü¢ –í—ã—Å–æ–∫–æ (75-100%)'].append(user_state)
        
        # –ü–æ–¥—Å—á–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π
        state_counts[user_state.state] += 1
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π
        for field in user_state.missing_fields:
            missing_field_counts[field] += 1
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report_filename = f"summary_report_{label}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    
    with open(report_filename, 'w', encoding='utf-8') as f:
        f.write(f"üìã –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ù–ï–ó–ê–ü–û–õ–ù–ï–ù–ù–´–ú –ê–ù–ö–ï–¢–ê–ú\n")
        f.write(f"–°–µ—Ä–≤–µ—Ä: {label}\n")
        f.write(f"–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"{'='*60}\n\n")
        
        f.write(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n")
        f.write(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {len(user_states)}\n\n")
        
        f.write(f"üìà –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ó–ê–ü–û–õ–ù–ï–ù–ù–û–°–¢–ò:\n")
        for category, users in completion_ranges.items():
            f.write(f"{category}: {len(users)} —á–µ–ª.\n")
            for user in users[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 3 –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                f.write(f"  ‚Ä¢ {user.user_id}: {user.dialog_data.get('full_name', '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')} "
                       f"({user.completion_percentage:.1f}%)\n")
            if len(users) > 3:
                f.write(f"  ... –∏ –µ—â–µ {len(users) - 3} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n")
        f.write("\n")
        
        f.write(f"üéØ –°–û–°–¢–û–Ø–ù–ò–Ø –î–ò–ê–õ–û–ì–û–í:\n")
        for state, count in sorted(state_counts.items()):
            f.write(f"{state}: {count} —á–µ–ª.\n")
        f.write("\n")
        
        f.write(f"‚ùå –¢–û–ü-10 –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –ü–û–õ–ï–ô:\n")
        top_missing = sorted(missing_field_counts.items(), key=lambda x: x[1], reverse=True)[:10]
        for field, count in top_missing:
            f.write(f"{field}: {count} —á–µ–ª.\n")
        f.write("\n")
        
        f.write(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –°–õ–£–ß–ê–ò (–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å < 25%):\n")
        critical_users = completion_ranges['üî¥ –ö—Ä–∏—Ç–∏—á–Ω–æ (0-25%)']
        if critical_users:
            for user in critical_users:
                f.write(f"User {user.user_id}: {user.dialog_data.get('full_name', '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
                f.write(f"  –°–æ—Å—Ç–æ—è–Ω–∏–µ: {user.state}\n")
                f.write(f"  –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å: {user.completion_percentage:.1f}%\n")
                f.write(f"  –ù–µ–¥–æ—Å—Ç–∞–µ—Ç: {', '.join(user.missing_fields)}\n\n")
        else:
            f.write("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n")
    
    print(f"üìÑ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_filename}")
    return report_filename

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏ production —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    print("\nüè† –ê–Ω–∞–ª–∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
    local_config = RedisConfig(host='localhost', port=6379)
    local_analyzer = RedisDialogAnalyzer(local_config)
    
    try:
        await local_analyzer.connect()
        local_filename = await local_analyzer.export_to_csv("local")
        await generate_summary_report(local_analyzer, "local")
        print(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {local_filename}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    finally:
        await local_analyzer.disconnect()
    
    print("\n" + "=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑ production —Å–µ—Ä–≤–µ—Ä–∞
    print("\nüåê –ê–Ω–∞–ª–∏–∑ production —Å–µ—Ä–≤–µ—Ä–∞...")
    prod_config = RedisConfig(host='45.90.217.194', port=6380)
    prod_analyzer = RedisDialogAnalyzer(prod_config)
    
    try:
        await prod_analyzer.connect()
        prod_filename = await prod_analyzer.export_to_csv("production")
        await generate_summary_report(prod_analyzer, "production")
        print(f"‚úÖ Production –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {prod_filename}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ production —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    finally:
        await prod_analyzer.disconnect()
    
    print("\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã.")

if __name__ == "__main__":
    asyncio.run(main())
