"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å file_id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –±–æ—Ç–µ.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —á–µ—Ä–µ–∑ file_id –≤–º–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤.
"""

import json
import logging
from pathlib import Path
from typing import Optional, Dict

from aiogram import Bot
from aiogram.types import InputMediaPhoto, Message

logger = logging.getLogger(__name__)


class PhotoSender:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —á–µ—Ä–µ–∑ file_id"""
    
    def __init__(self, file_id_storage_path: str = "config/photo_file_ids.json"):
        self.file_id_storage_path = Path(file_id_storage_path)
        self._file_ids_cache: Optional[Dict[str, str]] = None
    
    def _load_file_ids(self) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å file_id –∏–∑ —Ñ–∞–π–ª–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if self._file_ids_cache is None:
            if self.file_id_storage_path.exists():
                try:
                    with open(self.file_id_storage_path, 'r', encoding='utf-8') as f:
                        self._file_ids_cache = json.load(f)
                        logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self._file_ids_cache)} file_id –∏–∑ –∫–µ—à–∞")
                except (json.JSONDecodeError, FileNotFoundError) as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å file_id: {e}")
                    self._file_ids_cache = {}
            else:
                logger.warning(f"–§–∞–π–ª {self.file_id_storage_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self._file_ids_cache = {}
        
        return self._file_ids_cache
    
    def reload_cache(self) -> None:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à file_id"""
        self._file_ids_cache = None
        self._load_file_ids()
        logger.info("–ö–µ—à file_id –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    def get_file_id(self, relative_path: str) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å file_id –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–º—É –ø—É—Ç–∏.
        
        Args:
            relative_path: –ü—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–∞–ø–∫–∏ images (–Ω–∞–ø—Ä–∏–º–µ—Ä, "start/1.png")
            
        Returns:
            file_id –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        file_ids = self._load_file_ids()
        return file_ids.get(relative_path)
    
    async def send_photo_by_path(self, bot: Bot, chat_id: int, relative_path: str, 
                                caption: Optional[str] = None, **kwargs) -> Optional[Message]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–º—É –ø—É—Ç–∏.
        –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å file_id, –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª.
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            chat_id: ID —á–∞—Ç–∞
            relative_path: –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–∞–ø–∫–∏ images
            caption: –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è send_photo
            
        Returns:
            –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        file_id = self.get_file_id(relative_path)
        
        if file_id:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ file_id
                message = await bot.send_photo(
                    chat_id=chat_id,
                    photo=file_id,
                    caption=caption,
                    **kwargs
                )
                logger.debug(f"‚úÖ –§–æ—Ç–æ {relative_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ file_id")
                return message
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {relative_path} —á–µ—Ä–µ–∑ file_id: {e}")
        
        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
        try:
            from aiogram.types import FSInputFile
            
            full_path = Path("app/bot/assets/images") / relative_path
            if full_path.exists():
                photo = FSInputFile(full_path)
                message = await bot.send_photo(
                    chat_id=chat_id,
                    photo=photo,
                    caption=caption,
                    **kwargs
                )
                logger.warning(f"üìÅ –§–æ—Ç–æ {relative_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ —Ñ–∞–π–ª (fallback)")
                return message
            else:
                logger.error(f"‚ùå –§–∞–π–ª {full_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {relative_path}: {e}")
            return None
    
    async def send_photo_group_by_paths(self, bot: Bot, chat_id: int, 
                                       relative_paths: list[str], 
                                       captions: Optional[list[str]] = None,
                                       **kwargs) -> Optional[list[Message]]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∫–∞–∫ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É.
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            chat_id: ID —á–∞—Ç–∞
            relative_paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–æ—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–∞–ø–∫–∏ images
            captions: –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è send_media_group
            
        Returns:
            –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not relative_paths:
            return None
        
        media_group = []
        
        for i, relative_path in enumerate(relative_paths):
            file_id = self.get_file_id(relative_path)
            caption = captions[i] if captions and i < len(captions) else None
            
            if file_id:
                media_group.append(InputMediaPhoto(media=file_id, caption=caption))
            else:
                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª
                from aiogram.types import FSInputFile
                
                full_path = Path("app/bot/assets/images") / relative_path
                if full_path.exists():
                    photo = FSInputFile(full_path)
                    media_group.append(InputMediaPhoto(media=photo, caption=caption))
                else:
                    logger.error(f"‚ùå –§–∞–π–ª {full_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    continue
        
        if not media_group:
            logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return None
        
        try:
            messages = await bot.send_media_group(
                chat_id=chat_id,
                media=media_group,
                **kwargs
            )
            logger.debug(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ –∏–∑ {len(messages)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
            return messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {e}")
            return None
    
    def has_file_id(self, relative_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ file_id –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        return self.get_file_id(relative_path) is not None
    
    def get_stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ file_id"""
        file_ids = self._load_file_ids()
        return {
            "total_photos": len(file_ids),
            "cache_loaded": self._file_ids_cache is not None
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ
photo_sender = PhotoSender()


def get_photo_sender() -> PhotoSender:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä PhotoSender"""
    return photo_sender
