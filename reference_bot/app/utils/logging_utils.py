"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import logging
import functools
from datetime import datetime
from typing import Callable, Any
import json

logger = logging.getLogger(__name__)


def log_user_action(action_name: str, log_level: int = logging.INFO):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        action_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            user_id = None
            username = None
            
            for arg in args:
                if hasattr(arg, 'from_user'):
                    user_id = arg.from_user.id
                    username = arg.from_user.username
                    break
                elif hasattr(arg, 'event') and hasattr(arg.event, 'from_user'):
                    user_id = arg.event.from_user.id
                    username = arg.event.from_user.username
                    break
            
            start_time = datetime.now()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –¥–µ–π—Å—Ç–≤–∏—è
            logger.log(log_level, f"üéØ {action_name} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} (@{username}) | –ù–∞—á–∞–ª–æ")
            
            try:
                result = await func(*args, **kwargs)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                duration = (datetime.now() - start_time).total_seconds()
                logger.log(log_level, f"‚úÖ {action_name} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} | –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.2f}—Å")
                
                return result
                
            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                duration = (datetime.now() - start_time).total_seconds()
                logger.error(f"‚ùå {action_name} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} | –û—à–∏–±–∫–∞ –∑–∞ {duration:.2f}—Å: {e}")
                raise
                
        return wrapper
    return decorator


def log_data_operation(operation_name: str, sensitive_fields: list = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏
    
    Args:
        operation_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        sensitive_fields: –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–∫—Ä—ã—Ç—å –≤ –ª–æ–≥–∞—Ö
    """
    if sensitive_fields is None:
        sensitive_fields = ['password', 'token', 'secret', 'credentials']
    
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            start_time = datetime.now()
            
            # –ú–∞—Å–∫–∏—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            safe_kwargs = {}
            for key, value in kwargs.items():
                if any(sensitive in key.lower() for sensitive in sensitive_fields):
                    safe_kwargs[key] = "***MASKED***"
                else:
                    safe_kwargs[key] = str(value)[:100]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            
            logger.info(f"üìä {operation_name} | –ù–∞—á–∞–ª–æ | –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {safe_kwargs}")
            
            try:
                result = await func(*args, **kwargs)
                
                duration = (datetime.now() - start_time).total_seconds()
                logger.info(f"‚úÖ {operation_name} | –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.2f}—Å")
                
                return result
                
            except Exception as e:
                duration = (datetime.now() - start_time).total_seconds()
                logger.error(f"‚ùå {operation_name} | –û—à–∏–±–∫–∞ –∑–∞ {duration:.2f}—Å: {e}")
                raise
                
        return wrapper
    return decorator


def log_api_call(service_name: str, endpoint: str = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API –≤—ã–∑–æ–≤–æ–≤
    
    Args:
        service_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ (Google Drive, Google Sheets, etc.)
        endpoint: –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API
    """
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            start_time = datetime.now()
            
            endpoint_info = f" | Endpoint: {endpoint}" if endpoint else ""
            logger.info(f"üåê API Call | {service_name}{endpoint_info} | –ù–∞—á–∞–ª–æ")
            
            try:
                result = await func(*args, **kwargs)
                
                duration = (datetime.now() - start_time).total_seconds()
                logger.info(f"‚úÖ API Call | {service_name} | –£—Å–ø–µ—à–Ω–æ –∑–∞ {duration:.2f}—Å")
                
                return result
                
            except Exception as e:
                duration = (datetime.now() - start_time).total_seconds()
                error_type = type(e).__name__
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ API –æ—à–∏–±–æ–∫
                if "403" in str(e):
                    logger.warning(f"üö´ API Call | {service_name} | –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403) –∑–∞ {duration:.2f}—Å")
                elif "401" in str(e):
                    logger.warning(f"üîê API Call | {service_name} | –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (401) –∑–∞ {duration:.2f}—Å")
                elif "404" in str(e):
                    logger.warning(f"üîç API Call | {service_name} | –ù–µ –Ω–∞–π–¥–µ–Ω–æ (404) –∑–∞ {duration:.2f}—Å")
                elif "quotaExceeded" in str(e) or "storageQuotaExceeded" in str(e):
                    logger.warning(f"üìä API Call | {service_name} | –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ –∑–∞ {duration:.2f}—Å")
                else:
                    logger.error(f"‚ùå API Call | {service_name} | {error_type} –∑–∞ {duration:.2f}—Å: {e}")
                
                raise
                
        return wrapper
    return decorator


class ProcessLogger:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    
    def __init__(self, process_name: str, user_id: int = None):
        self.process_name = process_name
        self.user_id = user_id
        self.start_time = datetime.now()
        self.steps = []
        
    def step(self, step_name: str, details: str = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —à–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        timestamp = datetime.now()
        duration = (timestamp - self.start_time).total_seconds()
        
        step_info = f"üìã {self.process_name} | –®–∞–≥: {step_name}"
        if self.user_id:
            step_info += f" | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user_id}"
        step_info += f" | +{duration:.2f}—Å"
        
        if details:
            step_info += f" | {details}"
            
        logger.info(step_info)
        
        self.steps.append({
            'step': step_name,
            'timestamp': timestamp.isoformat(),
            'duration': duration,
            'details': details
        })
    
    def complete(self, success: bool = True, final_message: str = None):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å"""
        total_duration = (datetime.now() - self.start_time).total_seconds()
        
        status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if success else "‚ùå –° –æ—à–∏–±–∫–æ–π"
        completion_info = f"üèÅ {self.process_name} | {status} | –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration:.2f}—Å"
        
        if self.user_id:
            completion_info += f" | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user_id}"
            
        if final_message:
            completion_info += f" | {final_message}"
            
        logger.info(completion_info)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –ø–æ —à–∞–≥–∞–º
        if self.steps:
            logger.debug(f"üìä {self.process_name} | –°–≤–æ–¥–∫–∞ –ø–æ —à–∞–≥–∞–º: {len(self.steps)} —à–∞–≥–æ–≤")
            for i, step in enumerate(self.steps, 1):
                logger.debug(f"   {i}. {step['step']} ({step['duration']:.2f}—Å)")


def create_process_logger(process_name: str, user_id: int = None) -> ProcessLogger:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    return ProcessLogger(process_name, user_id)


# –ì–æ—Ç–æ–≤—ã–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —á–∞—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
database_operation = log_data_operation
google_api_call = log_api_call
user_action = log_user_action

# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
# @user_action("–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—é–º–µ")
# async def upload_resume(...)

# @google_api_call("Google Drive", "files.create")  
# async def upload_to_drive(...)

# @database_operation("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏")
# async def save_application(...)
