import logging
from typing import Any, Awaitable, Callable, Dict

from aiogram import BaseMiddleware
from aiogram.types import Update, Message, CallbackQuery
from aiogram_dialog.api.exceptions import UnknownIntent, UnknownState
from aiogram.exceptions import TelegramBadRequest, TelegramRetryAfter, TelegramServerError

logger = logging.getLogger(__name__)


class ErrorHandlerMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–Ω—è—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    """

    async def __call__(
        self,
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any],
    ) -> Any:
        try:
            return await handler(event, data)
        except (UnknownIntent, UnknownState) as e:
            logger.error(f"Dialog context error for user {self._get_user_id(event)}: {e}")
            await self._send_context_error_message(event, data)
            # –ù–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ —É–ø–∞–ª
            return None
        except (TelegramBadRequest, TelegramRetryAfter, TelegramServerError) as e:
            logger.error(f"Telegram API error for user {self._get_user_id(event)}: {e}")
            await self._send_generic_error_message(event, data)
            # –ù–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ —É–ø–∞–ª
            return None
        except Exception as e:
            logger.exception(f"Unexpected error for user {self._get_user_id(event)}: {e}")
            await self._send_generic_error_message(event, data)
            # –ù–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ —É–ø–∞–ª
            return None

    def _get_user_id(self, event: Update) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–±—ã—Ç–∏—è"""
        if event.message:
            return event.message.from_user.id
        elif event.callback_query:
            return event.callback_query.from_user.id
        elif event.inline_query:
            return event.inline_query.from_user.id
        else:
            return 0

    def _get_chat_id(self, event: Update) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è"""
        if event.message:
            return event.message.chat.id
        elif event.callback_query and event.callback_query.message:
            return event.callback_query.message.chat.id
        else:
            return 0

    async def _send_context_error_message(self, event: Update, data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Ç–µ—Ä–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞"""
        bot = data.get("bot")
        chat_id = self._get_chat_id(event)
        
        if bot and chat_id:
            message = (
                "üö´ –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å.\n\n"
                "–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è /menu, —á—Ç–æ–±—ã –ø–æ—á–∏–Ω–∏—Ç—å –±–æ—Ç–∞."
            )
            try:
                await bot.send_message(chat_id=chat_id, text=message)
                logger.info(f"Context error message sent to user {self._get_user_id(event)}")
            except Exception as send_error:
                logger.error(f"Failed to send context error message to {chat_id}: {send_error}")

    async def _send_generic_error_message(self, event: Update, data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        bot = data.get("bot")
        chat_id = self._get_chat_id(event)
        
        if bot and chat_id:
            message = (
                "‚ö†Ô∏è –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è —Å–±—Ä–æ—Å–∞."
            )
            try:
                await bot.send_message(chat_id=chat_id, text=message)
                logger.info(f"Generic error message sent to user {self._get_user_id(event)}")
            except Exception as send_error:
                logger.error(f"Failed to send generic error message to {chat_id}: {send_error}")
