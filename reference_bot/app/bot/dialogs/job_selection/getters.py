from aiogram_dialog import DialogManager
from aiogram_dialog.api.entities import MediaAttachment, MediaId
from aiogram.enums import ContentType
import json
import os

from app.utils.optimized_dialog_widgets import get_file_id_for_path


def load_departments_config():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ—Ç–¥–µ–ª–æ–≤"""
    config_path = os.path.join(os.path.dirname(__file__), '../../../../config/departments.json')
    
    with open(config_path, 'r', encoding='utf-8') as f:
        return json.load(f)


async def get_departments_list(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    config = load_departments_config()
    departments = []
    
    for dept_key, dept_data in config["departments"].items():
        departments.append((dept_key, dept_data["name"]))
    
    return {
        "departments": departments,
    }


async def get_subdepartments_list(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥-–æ—Ç–¥–µ–ª–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞"""
    config = load_departments_config()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    selected_dept = dialog_manager.dialog_data.get("selected_department")
    if not selected_dept:
        return {"subdepartments": [], "selected_department": "", "department_description": ""}
    
    dept_data = config["departments"].get(selected_dept, {})
    subdepartments = []
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥-–æ—Ç–¥–µ–ª—ã
    if "subdepartments" in dept_data:
        for subdept_key, subdept_data in dept_data["subdepartments"].items():
            subdepartments.append((subdept_key, subdept_data["name"]))
    
    return {
        "subdepartments": subdepartments,
        "selected_department": dept_data.get("name", selected_dept),
        "department_description": dept_data.get("description", "")
    }


def _is_vacancy_already_selected(dialog_data, dept_key, subdept_key, pos_index, exclude_priority=None):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —É–∂–µ –¥–∞–Ω–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è"""
    current_vacancy = (dept_key, subdept_key, pos_index)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
    for i in range(1, 4):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        if exclude_priority and i == exclude_priority:
            continue
            
        dept = dialog_data.get(f"priority_{i}_department")
        subdept = dialog_data.get(f"priority_{i}_subdepartment")
        pos = dialog_data.get(f"priority_{i}_position")
        
        if dept and pos is not None:
            stored_vacancy = (dept, subdept, str(pos))
            if stored_vacancy == current_vacancy:
                return True
    
    return False


async def get_positions_for_department(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ –∏–ª–∏ –ø–æ–¥-–æ—Ç–¥–µ–ª–∞"""
    config = load_departments_config()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –∏ –ø–æ–¥-–æ—Ç–¥–µ–ª –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    selected_dept = dialog_manager.dialog_data.get("selected_department")
    selected_subdept = dialog_manager.dialog_data.get("selected_subdepartment")
    
    print(f"DEBUG: get_positions_for_department - selected_dept={selected_dept}, selected_subdept={selected_subdept}")
    
    if not selected_dept:
        return {"positions": [], "selected_department": "", "department_description": ""}
    
    dept_data = config["departments"].get(selected_dept, {})
    positions = []
    department_name = dept_data.get("name", selected_dept)
    department_description = dept_data.get("description", "")
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–æ–¥-–æ—Ç–¥–µ–ª
    if selected_subdept and "subdepartments" in dept_data:
        subdept_data = dept_data["subdepartments"].get(selected_subdept, {})
        positions_list = subdept_data.get("positions", [])
        department_name = f"{department_name} - {subdept_data.get('name', selected_subdept)}"
        department_description = subdept_data.get("description", department_description)
        print(f"DEBUG: Using subdepartment positions - subdept={selected_subdept}, positions_count={len(positions_list)}")
    else:
        # –ë–µ—Ä–µ–º –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –æ—Ç–¥–µ–ª–∞
        positions_list = dept_data.get("positions", [])
        print(f"DEBUG: Using department positions - dept={selected_dept}, positions_count={len(positions_list)}")
    
    print(f"DEBUG: positions_list = {positions_list}")
    
    dialog_data = dialog_manager.dialog_data
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º—ã —Å–µ–π—á–∞—Å –≤—ã–±–∏—Ä–∞–µ–º, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –µ–≥–æ –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
    current_state = dialog_manager.current_context().state.state
    exclude_priority = None
    if current_state == "JobSelectionSG:select_position":
        exclude_priority = 1
    elif current_state == "JobSelectionSG:select_position_2":
        exclude_priority = 2
    elif current_state == "JobSelectionSG:select_position_3":
        exclude_priority = 3
    
    for i, pos_name in enumerate(positions_list):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –ø–æ–∑–∏—Ü–∏—è
        if not _is_vacancy_already_selected(dialog_data, selected_dept, selected_subdept, str(i), exclude_priority):
            positions.append((str(i), pos_name))
    
    print(f"DEBUG: final positions = {positions}")
    
    return {
        "positions": positions,
        "selected_department": department_name,
        "department_description": department_description
    }


async def get_priorities_overview(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±–∑–æ—Ä –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤"""
    data = dialog_manager.dialog_data
    config = load_departments_config()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º start_data, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã —á–µ—Ä–µ–∑ start()
    start_data = dialog_manager.start_data or {}
    combined_data = {**start_data, **data}  # start_data –∏–º–µ–µ—Ç –º–µ–Ω—å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
    is_editing = combined_data.get("is_editing", False)
    
    priorities_text = ""
    priorities_count = 0
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
    for i in range(1, 4):
        dept_key = combined_data.get(f"priority_{i}_department")
        subdept_key = combined_data.get(f"priority_{i}_subdepartment")
        pos_index = combined_data.get(f"priority_{i}_position")
        
        if dept_key and pos_index is not None:
            priorities_count += 1
            dept_data = config["departments"].get(dept_key, {})
            dept_name = dept_data.get("name", dept_key)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥-–æ—Ç–¥–µ–ª
            if subdept_key and "subdepartments" in dept_data:
                subdept_data = dept_data["subdepartments"].get(subdept_key, {})
                positions_list = subdept_data.get("positions", [])
                full_dept_name = f"{dept_name} - {subdept_data.get('name', subdept_key)}"
            else:
                positions_list = dept_data.get("positions", [])
                full_dept_name = dept_name
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ –∏–Ω–¥–µ–∫—Å—É –∏–∑ –º–∞—Å—Å–∏–≤–∞
            try:
                pos_name = positions_list[int(pos_index)]
            except (IndexError, ValueError):
                pos_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è"
                
            priorities_text += f"ü•á <b>{i}-–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {full_dept_name} - {pos_name}\n"
        else:
            priorities_text += f"‚ö™ <b>{i}-–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> <i>–Ω–µ –≤—ã–±—Ä–∞–Ω</i>\n"
    
    return {
        "priorities_text": priorities_text,
        "priorities_count": priorities_count,
        "can_add_2": priorities_count >= 1 and not combined_data.get("priority_2_department"),
        "can_add_3": priorities_count >= 2 and not combined_data.get("priority_3_department"),
        "is_editing": is_editing,
        "continue_button_text": "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è" if is_editing else "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã"
    }


async def get_edit_departments_list(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤
    result = await get_departments_list(dialog_manager, **kwargs)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –æ—Ç–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–¥–µ–ª
    editing_priority = dialog_manager.dialog_data.get("editing_priority", 1)
    current_dept = dialog_manager.dialog_data.get(f"priority_{editing_priority}_department")
    
    if current_dept:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–¥–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        dialog_manager.dialog_data["edit_selected_department"] = current_dept
        
        # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –≤ —Å–ø–∏—Å–∫–µ –æ—Ç–¥–µ–ª–æ–≤
        departments = result.get("departments", [])
        updated_departments = []
        for dept_id, dept_name in departments:
            if dept_id == current_dept:
                updated_departments.append((dept_id, f"‚úÖ {dept_name} (—Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä)"))
            else:
                updated_departments.append((dept_id, dept_name))
        result["departments"] = updated_departments
    
    return result


async def get_edit_subdepartments_list(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥-–æ—Ç–¥–µ–ª–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞"""
    config = load_departments_config()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    selected_dept = dialog_manager.dialog_data.get("edit_selected_department")
    if not selected_dept:
        return {"subdepartments": [], "selected_department": "", "department_description": ""}
    
    dept_data = config["departments"].get(selected_dept, {})
    subdepartments = []
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–¥-–æ—Ç–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    editing_priority = dialog_manager.dialog_data.get("editing_priority", 1)
    current_subdept = dialog_manager.dialog_data.get(f"priority_{editing_priority}_subdepartment")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥-–æ—Ç–¥–µ–ª—ã
    if "subdepartments" in dept_data:
        for subdept_key, subdept_data in dept_data["subdepartments"].items():
            if subdept_key == current_subdept:
                display_name = f"‚úÖ {subdept_data['name']} (—Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä)"
            else:
                display_name = subdept_data["name"]
            subdepartments.append((subdept_key, display_name))
    
    if current_subdept:
        dialog_manager.dialog_data["edit_selected_subdepartment"] = current_subdept
    
    return {
        "subdepartments": subdepartments,
        "selected_department": dept_data.get("name", selected_dept),
        "department_description": dept_data.get("description", "")
    }


async def get_edit_positions_for_department(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞/–ø–æ–¥-–æ—Ç–¥–µ–ª–∞"""
    config = load_departments_config()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –∏ –ø–æ–¥-–æ—Ç–¥–µ–ª –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    selected_dept = dialog_manager.dialog_data.get("edit_selected_department")
    selected_subdept = dialog_manager.dialog_data.get("edit_selected_subdepartment")
    
    if not selected_dept:
        return {"positions": [], "selected_department": "", "department_description": ""}
    
    dept_data = config["departments"].get(selected_dept, {})
    positions = []
    department_name = dept_data.get("name", selected_dept)
    department_description = dept_data.get("description", "")
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–æ–¥-–æ—Ç–¥–µ–ª
    if selected_subdept and "subdepartments" in dept_data:
        subdept_data = dept_data["subdepartments"].get(selected_subdept, {})
        positions_list = subdept_data.get("positions", [])
        department_name = f"{department_name} - {subdept_data.get('name', selected_subdept)}"
        department_description = subdept_data.get("description", department_description)
    else:
        # –ë–µ—Ä–µ–º –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –æ—Ç–¥–µ–ª–∞
        positions_list = dept_data.get("positions", [])
    
    dialog_data = dialog_manager.dialog_data
    editing_priority = dialog_data.get("editing_priority", 1)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    current_position = dialog_data.get(f"priority_{editing_priority}_position")
    current_dept = dialog_data.get(f"priority_{editing_priority}_department")
    current_subdept = dialog_data.get(f"priority_{editing_priority}_subdepartment")
    
    for i, pos_name in enumerate(positions_list):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –ø–æ–∑–∏—Ü–∏—è
        # (–∏—Å–∫–ª—é—á–∞—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if not _is_vacancy_already_selected(dialog_data, selected_dept, selected_subdept, str(i), exclude_priority=editing_priority):
            # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ –∏–Ω–¥–µ–∫—Å –ø–æ–∑–∏—Ü–∏–∏, –Ω–æ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–¥–µ–ª–∞/–ø–æ–¥–æ—Ç–¥–µ–ª–∞
            is_current_choice = (
                current_position is not None and 
                str(i) == str(current_position) and 
                current_dept == selected_dept and 
                current_subdept == selected_subdept
            )
            
            if is_current_choice:
                display_name = f"‚úÖ {pos_name} (—Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä)"
            else:
                display_name = pos_name
            positions.append((str(i), display_name))
    
    return {
        "positions": positions,
        "selected_department": department_name,
        "department_description": department_description
    }


async def get_department_selection_media(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª–∞"""
    file_id = get_file_id_for_path("choose_department/–æ—Ç–¥–µ–ª—ã.png")
    
    if file_id:
        media = MediaAttachment(
            type=ContentType.PHOTO,
            file_id=MediaId(file_id)
        )
    else:
        media = MediaAttachment(
            type=ContentType.PHOTO,
            path="app/bot/assets/images/choose_department/–æ—Ç–¥–µ–ª—ã.png"
        )
    
    return {
        "media": media
    }


async def get_subdepartment_media(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è –ø–æ–¥-–æ—Ç–¥–µ–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞"""
    selected_dept = dialog_manager.dialog_data.get("selected_department")
    
    if not selected_dept:
        # Fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        return await get_department_selection_media(dialog_manager, **kwargs)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –æ—Ç–¥–µ–ª–∞
    department_images = {
        "creative": "choose_department/creative/—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π.png",
        "design": "choose_department/design/–¥–∏–∑–∞–π–Ω.png", 
        "exhibition": "choose_department/exhibition/exhibition.png",
        "logistics_it": "choose_department/logistics/–ª–æ–≥–∏—Å—Ç–∏–∫–∞.png",
        "partners": "choose_department/partners/partners.png",
        "program": "choose_department/program/program.png",
        "smm_pr": "choose_department/smmpr/smm.png"
    }
    
    image_path = department_images.get(selected_dept, "choose_department/–æ—Ç–¥–µ–ª—ã.png")
    file_id = get_file_id_for_path(image_path)
    
    if file_id:
        media = MediaAttachment(
            type=ContentType.PHOTO,
            file_id=MediaId(file_id)
        )
    else:
        media = MediaAttachment(
            type=ContentType.PHOTO,
            path=f"app/bot/assets/images/{image_path}"
        )
    
    return {
        "media": media
    }


async def get_position_media(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞ –∏ –ø–æ–¥-–æ—Ç–¥–µ–ª–∞"""
    selected_dept = dialog_manager.dialog_data.get("selected_department")
    selected_subdept = dialog_manager.dialog_data.get("selected_subdepartment")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–¥–æ—Ç–¥–µ–ª–∞
    # –ï—Å–ª–∏ –¥–∞, —Ç–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º DynamicMedia (–º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ)
    if (selected_dept == "creative" and selected_subdept == "stage") or \
       (selected_dept == "smm_pr" and selected_subdept in ["social", "media"]):
        # –î–ª—è –ø–æ–¥–æ—Ç–¥–µ–ª–æ–≤ —Å –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞–º–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        file_id = get_file_id_for_path("choose_department/–æ—Ç–¥–µ–ª—ã.png")
        if file_id:
            media = MediaAttachment(
                type=ContentType.PHOTO,
                file_id=MediaId(file_id)
            )
        else:
            media = MediaAttachment(
                type=ContentType.PHOTO,
                path="app/bot/assets/images/choose_department/–æ—Ç–¥–µ–ª—ã.png"
            )
        return {
            "media": media
        }
    
    if not selected_dept:
        return await get_department_selection_media(dialog_manager, **kwargs)
    
    # –ë–∞–∑–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–¥–µ–ª–æ–≤ –±–µ–∑ –ø–æ–¥–æ—Ç–¥–µ–ª–æ–≤
    department_position_images = {
        "design": "choose_position/design/–î–ò–ó–ê–ô–ù.png",
        "exhibition": "choose_position/exhibition/–í–´–°–¢–ê–í–ö–ò.png", 
        "logistics_it": "choose_position/logistics/–õ–û–ì–ò–°–¢–ò–ö–ê.png",
        "partners": "choose_position/partners/–ü–ê–†–¢–ù–ï–†–´.png",
        "program": "choose_position/program/–ü–†–û–ì–†–ê–ú–ú–ê.png"
    }
    
    # –î–ª—è –æ—Ç–¥–µ–ª–æ–≤ —Å –ø–æ–¥–æ—Ç–¥–µ–ª–∞–º–∏ –±–µ–∑ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
    if selected_dept == "creative" and selected_subdept == "booth":
        image_path = "choose_position/creative/–¢–í–û–†–ß–ï–°–ö–ò–ô_—Å—Ç–µ–Ω–¥.png"
    else:
        # –û–±—ã—á–Ω—ã–µ –æ—Ç–¥–µ–ª—ã
        image_path = department_position_images.get(selected_dept, "choose_department/–æ—Ç–¥–µ–ª—ã.png")
    
    file_id = get_file_id_for_path(image_path)
    
    if file_id:
        media = MediaAttachment(
            type=ContentType.PHOTO,
            file_id=MediaId(file_id)
        )
    else:
        media = MediaAttachment(
            type=ContentType.PHOTO,
            path=f"app/bot/assets/images/{image_path}"
        )
    
    return {
        "media": media
    }


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω—ã–º, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç edit_ –ø—Ä–µ—Ñ–∏–∫—Å—ã)
async def get_edit_subdepartment_media(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è –ø–æ–¥-–æ—Ç–¥–µ–ª–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    selected_dept = dialog_manager.dialog_data.get("edit_selected_department")
    
    if not selected_dept:
        return await get_department_selection_media(dialog_manager, **kwargs)
    
    department_images = {
        "creative": "choose_department/creative/—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π.png",
        "design": "choose_department/design/–¥–∏–∑–∞–π–Ω.png",
        "exhibition": "choose_department/exhibition/–≤—ã—Å—Ç–∞–≤–æ—á–Ω—ã–π.png", 
        "logistics_it": "choose_department/logistics/–ª–æ–≥–∏—Å—Ç–∏–∫–∞.png",
        "partners": "choose_department/partners/–ø–∞—Ä—Ç–Ω–µ—Ä—ã.png",
        "program": "choose_department/program/–ø—Ä–æ–≥—Ä–∞–º–º–∞.png",
        "smm_pr": "choose_department/smmpr/smm.png"
    }
    
    image_path = department_images.get(selected_dept, "choose_department/–æ—Ç–¥–µ–ª—ã.png")
    file_id = get_file_id_for_path(image_path)
    
    if file_id:
        media = MediaAttachment(
            type=ContentType.PHOTO,
            file_id=MediaId(file_id)
        )
    else:
        media = MediaAttachment(
            type=ContentType.PHOTO,
            path=f"app/bot/assets/images/{image_path}"
        )
    
    return {
        "media": media
    }


async def get_edit_position_media(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    selected_dept = dialog_manager.dialog_data.get("edit_selected_department")
    selected_subdept = dialog_manager.dialog_data.get("edit_selected_subdepartment")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–¥–æ—Ç–¥–µ–ª–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    # –ï—Å–ª–∏ –¥–∞, —Ç–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º DynamicMedia (–º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ)
    if (selected_dept == "creative" and selected_subdept == "stage") or \
       (selected_dept == "smm_pr" and selected_subdept in ["social", "media"]):
        # –î–ª—è –ø–æ–¥–æ—Ç–¥–µ–ª–æ–≤ —Å –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞–º–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        file_id = get_file_id_for_path("choose_department/–æ—Ç–¥–µ–ª—ã.png")
        if file_id:
            media = MediaAttachment(
                type=ContentType.PHOTO,
                file_id=MediaId(file_id)
            )
        else:
            media = MediaAttachment(
                type=ContentType.PHOTO,
                path="app/bot/assets/images/choose_department/–æ—Ç–¥–µ–ª—ã.png"
            )
        return {
            "media": media
        }
    
    if not selected_dept:
        return await get_department_selection_media(dialog_manager, **kwargs)
    
    department_position_images = {
        "design": "choose_position/design/–î–ò–ó–ê–ô–ù.png",
        "exhibition": "choose_position/exhibition/–í–´–°–¢–ê–í–ö–ò.png",
        "logistics_it": "choose_position/logistics/–õ–û–ì–ò–°–¢–ò–ö–ê.png", 
        "partners": "choose_position/partners/–ü–ê–†–¢–ù–ï–†–´.png",
        "program": "choose_position/program/–ü–†–û–ì–†–ê–ú–ú–ê.png"
    }
    
    # –î–ª—è –æ—Ç–¥–µ–ª–æ–≤ —Å –ø–æ–¥–æ—Ç–¥–µ–ª–∞–º–∏ –±–µ–∑ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
    if selected_dept == "creative" and selected_subdept == "booth":
        image_path = "choose_position/creative/–¢–í–û–†–ß–ï–°–ö–ò–ô_—Å—Ç–µ–Ω–¥.png"
    else:
        image_path = department_position_images.get(selected_dept, "choose_department/–æ—Ç–¥–µ–ª—ã.png")
    
    file_id = get_file_id_for_path(image_path)
    
    if file_id:
        media = MediaAttachment(
            type=ContentType.PHOTO,
            file_id=MediaId(file_id)
        )
    else:
        media = MediaAttachment(
            type=ContentType.PHOTO,
            path=f"app/bot/assets/images/{image_path}"
        )
    
    return {
        "media": media
    }



def should_show_position_media(data, widget, dialog_manager: DialogManager):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–µ–¥–∏–∞ –≤ –æ–∫–Ω–µ –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–∞–∫–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    current_state = dialog_manager.current_context().state.state
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –≤—ã–±–æ—Ä –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if current_state in ["JobSelectionSG:edit_priority_1_position", "JobSelectionSG:edit_priority_2_position", "JobSelectionSG:edit_priority_3_position"]:
        # –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_selected_* –¥–∞–Ω–Ω—ã–µ
        selected_dept = dialog_manager.dialog_data.get("edit_selected_department")
        selected_subdept = dialog_manager.dialog_data.get("edit_selected_subdepartment")
    else:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        if current_state == "JobSelectionSG:select_position":
            priority = 1
        elif current_state == "JobSelectionSG:select_position_2":
            priority = 2
        elif current_state == "JobSelectionSG:select_position_3":
            priority = 3
        else:
            return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–¥–∏–∞
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ—Ç–¥–µ–ª–µ –∏ –ø–æ–¥–æ—Ç–¥–µ–ª–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        selected_dept = dialog_manager.dialog_data.get(f"priority_{priority}_department")
        selected_subdept = dialog_manager.dialog_data.get(f"priority_{priority}_subdepartment")
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –æ—Ç–¥–µ–ª —Å –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–æ–π, —Ç–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º DynamicMedia
    if (selected_dept == "creative" and selected_subdept == "stage") or \
       (selected_dept == "smm_pr" and selected_subdept in ["social", "media"]):
        return False
    
    return True
