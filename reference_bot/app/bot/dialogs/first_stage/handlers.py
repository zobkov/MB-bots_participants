import os
import csv
import re
import logging
from datetime import datetime
from typing import Any

from aiogram import Bot
from aiogram.types import Message, CallbackQuery, Document, User
from aiogram_dialog import DialogManager, StartMode, ShowMode
from aiogram_dialog.widgets.input import MessageInput

from config.config import Config
from app.infrastructure.database.database.db import DB
from app.bot.states.first_stage import FirstStageSG
from app.bot.states.main_menu import MainMenuSG
from app.bot.states.job_selection import JobSelectionSG
from app.services.error_monitoring import error_monitor
from app.utils.filename_utils import make_safe_filename

logger = logging.getLogger(__name__)


async def on_job_selection_result(start_data: Any, result: Any, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π"""
    logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π: {result}")
    
    if result:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—ã–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π
        dialog_manager.dialog_data.update(result)
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ: {list(result.keys())}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    was_editing = start_data and start_data.get("is_editing", False)
    
    if was_editing:
        # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        logger.info(f"üîÑ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π")
        await dialog_manager.switch_to(FirstStageSG.confirmation)
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –ø–µ—Ä–≤–∏—á–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ experience
        logger.info(f"‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π")
        await dialog_manager.switch_to(FirstStageSG.experience)


async def process_name(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    name = message.text.strip()
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –∏–º—è: {name}")
    dialog_manager.dialog_data["name"] = name
    await dialog_manager.next()


async def process_surname(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    surname = message.text.strip()
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª —Ñ–∞–º–∏–ª–∏—é: {surname}")
    dialog_manager.dialog_data["surname"] = surname
    await dialog_manager.next()


async def process_patronymic(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    patronymic = message.text.strip()
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –æ—Ç—á–µ—Å—Ç–≤–æ: {patronymic}")
    dialog_manager.dialog_data["patronymic"] = patronymic
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
    name = dialog_manager.dialog_data.get("name", "")
    surname = dialog_manager.dialog_data.get("surname", "")
    full_name = f"{surname} {name} {patronymic}".strip()
    dialog_manager.dialog_data["full_name"] = full_name
    logger.info(f"‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª–Ω–æ–µ –∏–º—è: {full_name}")
    await dialog_manager.next()


async def process_university(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    university = message.text.strip()
    logger.info(f"üè´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç: {university}")
    dialog_manager.dialog_data["university"] = university
    await dialog_manager.next()


async def process_course(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    try:
        course = int(message.text.strip())
        if course < 1 or course > 6:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—É—Ä—Å: {course}")
            error_monitor.log_validation_error(
                field="course",
                value=str(course),
                user_id=message.from_user.id,
                username=message.from_user.username
            )
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –æ—Ç 1 –¥–æ 6")
            return
        
        logger.info(f"üìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –∫—É—Ä—Å: {course}")
        dialog_manager.dialog_data["course"] = str(course)
        await dialog_manager.next()
    except ValueError:
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞: {message.text}")
        error_monitor.log_validation_error(
            field="course",
            value=message.text,
            user_id=message.from_user.id,
            username=message.from_user.username
        )
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6")


async def process_phone(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    phone = message.text.strip()
    logger.info(f"üìû –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª —Ç–µ–ª–µ—Ñ–æ–Ω: {phone[:4]}***")  # –ß–∞—Å—Ç–∏—á–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if len(phone) < 10:
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return
        
    dialog_manager.dialog_data["phone"] = phone
    await dialog_manager.next()


async def process_email(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    email = message.text.strip()
    logger.info(f"üìß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª email: {email}")
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
    import re
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if re.match(email_pattern, email):
        logger.info(f"‚úÖ Email –≤–∞–ª–∏–¥–µ–Ω: {email}")
        dialog_manager.dialog_data["email"] = email
        await dialog_manager.next()
    else:
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email: {email}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å")


async def process_experience(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    experience = message.text.strip()
    logger.info(f"üíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã ({len(experience)} —Å–∏–º–≤–æ–ª–æ–≤)")
    dialog_manager.dialog_data["experience"] = experience
    await dialog_manager.next()


async def process_motivation(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    motivation = message.text.strip()
    logger.info(f"üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –º–æ—Ç–∏–≤–∞—Ü–∏—é ({len(motivation)} —Å–∏–º–≤–æ–ª–æ–≤)")
    dialog_manager.dialog_data["motivation"] = motivation
    await dialog_manager.next()


async def process_text_resume(message: Message, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ"""
    user = message.from_user
    text_content = message.text.strip()
    
    logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞
    dialog_data = dialog_manager.dialog_data
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –æ—Ç—á–µ—Å—Ç–≤–æ
    surname = dialog_data.get("surname", "")
    name = dialog_data.get("name", "")
    patronymic = dialog_data.get("patronymic", "")
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not surname or surname.strip() == "":
        surname = "User"
    if not name or name.strip() == "":
        name = "Unknown"
    if not patronymic or patronymic.strip() == "":
        patronymic = "Unknown"

    logger.info(f"üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞:")
    logger.info(f"   - –§–∞–º–∏–ª–∏—è: {surname}")
    logger.info(f"   - –ò–º—è: {name}")
    logger.info(f"   - –û—Ç—á–µ—Å—Ç–≤–æ: {patronymic}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    name_initial = name[0].upper() if name and len(name) > 0 and name != "Unknown" else "U"
    
    if patronymic and patronymic.strip() != "" and patronymic != "Unknown":
        patronymic_initial = patronymic[0].upper()
        initials = f"{name_initial}{patronymic_initial}"
        logger.info(f"   üìù –ò–Ω–∏—Ü–∏–∞–ª—ã (—Å –æ—Ç—á–µ—Å—Ç–≤–æ–º): {initials}")
    else:
        initials = name_initial
        logger.info(f"   üìù –ò–Ω–∏—Ü–∏–∞–ª—ã (–±–µ–∑ –æ—Ç—á–µ—Å—Ç–≤–∞): {initials}")
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    raw_filename = f"{surname}_{initials}_{user.username or user.id}_{timestamp}.txt"
    new_filename = make_safe_filename(raw_filename)
    
    logger.info(f"üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ: {new_filename}")

    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        file_path = f"app/storage/resumes/{new_filename}"
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(text_content)
        
        logger.info(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ: {file_path}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Google Drive –∑–∞–≥—Ä—É–∑–∫—É
        config: Config = dialog_manager.middleware_data.get("config")
        google_file_url = None
        
        if config and config.google and config.google.enable_drive:
            google_file_url = await upload_to_google_drive(file_path, new_filename, config, user.id)
            if google_file_url:
                dialog_manager.dialog_data["resume_google_url"] = google_file_url
            else:
                dialog_manager.dialog_data["resume_google_error"] = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL —Ñ–∞–π–ª–∞ –≤ Google Drive"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞
        dialog_manager.dialog_data["resume_file"] = new_filename
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        message_text = f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫: {new_filename}\n"
        message_text += "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É."
        
        await message.answer(message_text)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        logger.info(f"‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        await dialog_manager.switch_to(FirstStageSG.confirmation)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return


async def process_photo_resume(message: Message, photo_list, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–µ–∑—é–º–µ"""
    bot: Bot = dialog_manager.middleware_data["bot"]
    user = message.from_user
    
    logger.info(f"üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ä–µ–∑—é–º–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å–∞–º–æ–≥–æ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ —Å–ø–∏—Å–∫–µ)
    if not photo_list:
        logger.error(f"‚ùå –°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—É—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    photo = photo_list[-1]
    
    logger.info(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:")
    logger.info(f"   - File ID: {photo.file_id}")
    logger.info(f"   - –†–∞–∑–º–µ—Ä: {photo.file_size} –±–∞–π—Ç ({photo.file_size / 1024 / 1024:.2f} –ú–ë)")
    logger.info(f"   - –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {photo.width}x{photo.height}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 15 –ú–ë)
    max_size = 15 * 1024 * 1024
    if photo.file_size and photo.file_size > max_size:
        logger.warning(f"‚ö†Ô∏è –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è: {photo.file_size} –±–∞–π—Ç")
        await message.answer("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 15 –ú–ë.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞
    dialog_data = dialog_manager.dialog_data
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –æ—Ç—á–µ—Å—Ç–≤–æ
    surname = dialog_data.get("surname", "")
    name = dialog_data.get("name", "")
    patronymic = dialog_data.get("patronymic", "")
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not surname or surname.strip() == "":
        surname = "User"
    if not name or name.strip() == "":
        name = "Unknown"
    if not patronymic or patronymic.strip() == "":
        patronymic = "Unknown"

    logger.info(f"üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞:")
    logger.info(f"   - –§–∞–º–∏–ª–∏—è: {surname}")
    logger.info(f"   - –ò–º—è: {name}")
    logger.info(f"   - –û—Ç—á–µ—Å—Ç–≤–æ: {patronymic}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    name_initial = name[0].upper() if name and len(name) > 0 and name != "Unknown" else "U"
    
    if patronymic and patronymic.strip() != "" and patronymic != "Unknown":
        patronymic_initial = patronymic[0].upper()
        initials = f"{name_initial}{patronymic_initial}"
        logger.info(f"   üìù –ò–Ω–∏—Ü–∏–∞–ª—ã (—Å –æ—Ç—á–µ—Å—Ç–≤–æ–º): {initials}")
    else:
        initials = name_initial
        logger.info(f"   üìù –ò–Ω–∏—Ü–∏–∞–ª—ã (–±–µ–∑ –æ—Ç—á–µ—Å—Ç–≤–∞): {initials}")
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    # –î–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .jpg
    raw_filename = f"{surname}_{initials}_{user.username or user.id}_{timestamp}.jpg"
    new_filename = make_safe_filename(raw_filename)
    
    logger.info(f"üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {new_filename}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç Telegram
        file = await bot.get_file(photo.file_id)
        file_path = f"app/storage/resumes/{new_filename}"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await bot.download_file(file.file_path, file_path)
        logger.info(f"‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Ä–µ–∑—é–º–µ —Å–∫–∞—á–∞–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ: {file_path}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Google Drive –∑–∞–≥—Ä—É–∑–∫—É
        config: Config = dialog_manager.middleware_data.get("config")
        google_file_url = None
        
        if config and config.google and config.google.enable_drive:
            google_file_url = await upload_to_google_drive(file_path, new_filename, config, user.id)
            if google_file_url:
                dialog_manager.dialog_data["resume_google_url"] = google_file_url
            else:
                dialog_manager.dialog_data["resume_google_error"] = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL —Ñ–∞–π–ª–∞ –≤ Google Drive"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞
        dialog_manager.dialog_data["resume_file"] = new_filename
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        message_text = f"‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Ä–µ–∑—é–º–µ –ø–æ–ª—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫: {new_filename}\n"
        message_text += "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É."
        
        await message.answer(message_text)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        logger.info(f"‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        await dialog_manager.switch_to(FirstStageSG.confirmation)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–µ–∑—é–º–µ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return


async def process_file_resume(message: Message, document: Document, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ (–ª—é–±—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤)"""
    bot: Bot = dialog_manager.middleware_data["bot"]
    user = message.from_user
    
    logger.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} (@{user.username})")

    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    logger.info(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:")
    logger.info(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ: {document.file_name}")
    logger.info(f"   - –†–∞–∑–º–µ—Ä: {document.file_size} –±–∞–π—Ç ({document.file_size / 1024 / 1024:.2f} –ú–ë)")
    logger.info(f"   - MIME-—Ç–∏–ø: {document.mime_type}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 15 –ú–ë)
    max_size = 15 * 1024 * 1024
    if document.file_size > max_size:
        logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {document.file_size} –±–∞–π—Ç")
        await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 15 –ú–ë.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞
    dialog_data = dialog_manager.dialog_data
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –æ—Ç—á–µ—Å—Ç–≤–æ
    surname = dialog_data.get("surname", "")
    name = dialog_data.get("name", "")
    patronymic = dialog_data.get("patronymic", "")
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not surname or surname.strip() == "":
        surname = "User"
    if not name or name.strip() == "":
        name = "Unknown"
    if not patronymic or patronymic.strip() == "":
        patronymic = "Unknown"

    logger.info(f"üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞:")
    logger.info(f"   - –§–∞–º–∏–ª–∏—è: {surname}")
    logger.info(f"   - –ò–º—è: {name}")
    logger.info(f"   - –û—Ç—á–µ—Å—Ç–≤–æ: {patronymic}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    name_initial = name[0].upper() if name and len(name) > 0 and name != "Unknown" else "U"
    
    if patronymic and patronymic.strip() != "" and patronymic != "Unknown":
        patronymic_initial = patronymic[0].upper()
        initials = f"{name_initial}{patronymic_initial}"
        logger.info(f"   üìù –ò–Ω–∏—Ü–∏–∞–ª—ã (—Å –æ—Ç—á–µ—Å—Ç–≤–æ–º): {initials}")
    else:
        initials = name_initial
        logger.info(f"   üìù –ò–Ω–∏—Ü–∏–∞–ª—ã (–±–µ–∑ –æ—Ç—á–µ—Å—Ç–≤–∞): {initials}")
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    file_extension = os.path.splitext(document.file_name)[1] if document.file_name else ".bin"
    raw_filename = f"{surname}_{initials}_{user.username or user.id}_{timestamp}{file_extension}"
    new_filename = make_safe_filename(raw_filename)
    
    logger.info(f"üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞: {new_filename}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç Telegram
        file = await bot.get_file(document.file_id)
        file_path = f"app/storage/resumes/{new_filename}"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await bot.download_file(file.file_path, file_path)
        logger.info(f"‚úÖ –§–∞–π–ª —Ä–µ–∑—é–º–µ —Å–∫–∞—á–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {file_path}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Google Drive –∑–∞–≥—Ä—É–∑–∫—É
        config: Config = dialog_manager.middleware_data.get("config")
        google_file_url = None
        
        if config and config.google and config.google.enable_drive:
            google_file_url = await upload_to_google_drive(file_path, new_filename, config, user.id)
            if google_file_url:
                dialog_manager.dialog_data["resume_google_url"] = google_file_url
            else:
                dialog_manager.dialog_data["resume_google_error"] = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL —Ñ–∞–π–ª–∞ –≤ Google Drive"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞
        dialog_manager.dialog_data["resume_file"] = new_filename
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        message_text = f"‚úÖ –†–µ–∑—é–º–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫: {new_filename}\n"
        message_text += "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É."
        
        await message.answer(message_text)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        logger.info(f"‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        await dialog_manager.switch_to(FirstStageSG.confirmation)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —Ä–µ–∑—é–º–µ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return


async def upload_to_google_drive(file_path: str, filename: str, config: Config, user_id: int) -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ Google Drive –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL"""
    logger.info(f"üîÑ Google Drive –≤–∫–ª—é—á–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    try:
        from app.services.google_services import GoogleServicesManager
        import asyncio
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä Google —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        google_manager = GoogleServicesManager(
            credentials_path=config.google.credentials_path,
            spreadsheet_id=config.google.spreadsheet_id,
            drive_folder_id=config.google.drive_folder_id or "",
            enable_drive=config.google.enable_drive
        )
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ {filename} –≤ Google Drive...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (—Ç–∞–∫ –∫–∞–∫ –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
        loop = asyncio.get_event_loop()
        google_file_url = await loop.run_in_executor(
            None, 
            google_manager.upload_file_to_drive,
            file_path,
            filename
        )
        
        if google_file_url:
            logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Google Drive: {google_file_url}")
            return google_file_url
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ Google Drive - –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π URL")
            return ""
        
    except Exception as e:
        error_msg = str(e)
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—é–º–µ –≤ Google Drive: {e}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if "Service Accounts do not have storage quota" in error_msg:
            logger.warning("‚ö†Ô∏è Google Drive: —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∏–º–µ–µ—Ç –∫–≤–æ—Ç—ã —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ - –Ω—É–∂–µ–Ω Shared Drive")
        elif "storageQuotaExceeded" in error_msg:
            logger.warning("‚ö†Ô∏è Google Drive: –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
        elif "quotaExceeded" in error_msg:
            logger.warning("‚ö†Ô∏è Google Drive: –ø—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã API")
        elif "403" in error_msg:
            logger.warning("‚ö†Ô∏è Google Drive: –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (403)")
        elif "401" in error_msg:
            logger.warning("‚ö†Ô∏è Google Drive: –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401)")
        elif "404" in error_msg:
            logger.warning("‚ö†Ô∏è Google Drive: –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404)")
        else:
            logger.error(f"‚ö†Ô∏è Google Drive: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ - {error_msg}")
        
        return ""


async def process_resume_file(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    bot: Bot = dialog_manager.middleware_data["bot"]
    document: Document = message.document
    photo = message.photo
    user = message.from_user
    
    logger.info(f"üìÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—é–º–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} (@{user.username})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—à–ª–æ: —Ñ–∞–π–ª, —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç
    if message.text and not document and not photo:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ
        logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} ({len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤)")
        await process_text_resume(message, dialog_manager)
        return
    
    if photo:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        logger.info(f"üì∏ –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        await process_photo_resume(message, photo, dialog_manager)
        return
    
    if document:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ
        await process_file_resume(message, document, dialog_manager)
        return
    
    if not document and not photo and not message.text:
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Ñ–∞–π–ª, —Ñ–æ—Ç–æ –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ, —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ.")
        return


async def on_confirm_application(callback: CallbackQuery, button, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    await save_application(dialog_manager)
    await dialog_manager.switch_to(FirstStageSG.success)

async def go_to_menu(callback: CallbackQuery, button, dialog_manager: DialogManager):
    await dialog_manager.start(MainMenuSG.main_menu, mode=StartMode.RESET_STACK)


async def save_application(dialog_manager: DialogManager):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –ë–î –∏ —ç–∫—Å–ø–æ—Ä—Ç"""
    from aiogram.types import User
    
    event_from_user: User = dialog_manager.event.from_user
    dialog_data = dialog_manager.dialog_data
    config: Config = dialog_manager.middleware_data.get("config")
    db: DB = dialog_manager.middleware_data.get("db")
    
    logger.info(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event_from_user.id} (@{event_from_user.username})")
    
    if not config or not db:
        logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ë–î")
        if not config:
            logger.error("‚ùå Config –æ–±—ä–µ–∫—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        if not db:
            logger.error("‚ùå DB –æ–±—ä–µ–∫—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return
    
    logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ë–î –¥–æ—Å—Ç—É–ø–Ω—ã")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤ process_resume_file)
    resume_local_path = None
    resume_google_drive_url = None
    
    resume_filename = dialog_data.get("resume_file")
    if resume_filename:
        resume_local_path = f"app/storage/resumes/{resume_filename}"
        resume_google_drive_url = dialog_data.get("resume_google_url", "")
        logger.info(f"üìÑ –§–∞–π–ª —Ä–µ–∑—é–º–µ: {resume_filename}")
        if resume_google_drive_url:
            logger.info(f"‚òÅÔ∏è Google Drive URL: {resume_google_drive_url}")
        else:
            logger.info(f"üíæ –¢–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ")
    else:
        logger.warning("‚ö†Ô∏è –§–∞–π–ª —Ä–µ–∑—é–º–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
    
    logger.info(f"üìä –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏...")
    
    # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä "–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –ö–ë–ö" –∏–∑ Multiselect
        multiselect = dialog_manager.find("how_found_multiselect")
        how_found_selections: list[str] = []

        if multiselect:
            how_found_selections = list(multiselect.get_checked())
        else:
            # Fallback –∫ dialog_data –µ—Å–ª–∏ Multiselect –Ω–µ –Ω–∞–π–¥–µ–Ω
            how_found_selections = dialog_data.get("how_found_selections", [])

        how_found_texts = []
        for selection in how_found_selections:
            try:
                idx = int(selection)
                if idx < len(config.selection.how_found_options):
                    how_found_texts.append(config.selection.how_found_options[idx])
            except (ValueError, IndexError):
                continue

        how_found_text = ", ".join(how_found_texts) if how_found_texts else ""
        logger.info(f"üîç –ö–∞–∫ —É–∑–Ω–∞–ª –æ –ö–ë–ö: {how_found_text}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–¥–µ–ª –µ—Å–ª–∏ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ö–ë–ö
        previous_department_text = ""
        if "6" in how_found_selections:  # "–†–∞–Ω–µ–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ö–ë–ö"
            previous_dept_key = dialog_data.get("previous_department", "")
            previous_dept_name = dialog_data.get("previous_department_name")
            if previous_dept_key or previous_dept_name:
                previous_department_text = previous_dept_name or config.selection.departments.get(previous_dept_key, {}).get('name', previous_dept_key)
                logger.info(f"üè¢ –ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–¥–µ–ª –≤ –ö–ë–ö: {previous_department_text}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ 'how_found_kbk': {e}")
        how_found_text = ""
        previous_department_text = ""
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤–∞–∫–∞–Ω—Å–∏–π —Å —É—á–µ—Ç–æ–º –ø–æ–¥-–æ—Ç–¥–µ–ª–æ–≤
        priorities_data = {}
        priorities_text = ""
        
        # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π department/position
        main_department_name = ""
        main_position_text = ""
        
        for i in range(1, 4):
            dept_key = dialog_data.get(f"priority_{i}_department")
            subdept_key = dialog_data.get(f"priority_{i}_subdepartment")
            pos_index = dialog_data.get(f"priority_{i}_position")
            
            if dept_key and pos_index is not None:
                dept_data = config.selection.departments.get(dept_key, {})
                dept_name = dept_data.get("name", dept_key)
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥-–æ—Ç–¥–µ–ª
                if subdept_key and "subdepartments" in dept_data:
                    subdept_data = dept_data["subdepartments"].get(subdept_key, {})
                    subdept_name = subdept_data.get("name", subdept_key)
                    positions_list = subdept_data.get("positions", [])
                    full_dept_name = f"{dept_name} - {subdept_name}"
                else:
                    positions_list = dept_data.get("positions", [])
                    full_dept_name = dept_name
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ –∏–Ω–¥–µ–∫—Å—É –∏–∑ –º–∞—Å—Å–∏–≤–∞
                try:
                    pos_name = positions_list[int(pos_index)]
                except (IndexError, ValueError):
                    pos_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è"
                
                priorities_data[f"priority_{i}"] = f"{full_dept_name} - {pos_name}"
                priorities_text += f"{i}: {full_dept_name} - {pos_name}; "
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
                if i == 1:
                    main_department_name = full_dept_name
                    main_position_text = pos_name
                
                logger.info(f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {i}: {full_dept_name} - {pos_name}")
            else:
                priorities_data[f"priority_{i}"] = "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
        
        if not priorities_text:
            priorities_text = "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω—ã"
        else:
            priorities_text = priorities_text.rstrip("; ")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤: {e}")
        priorities_text = "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤"
        main_department_name = ""
        main_position_text = ""
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    logger.info(f"üë§ –§–ò–û: {dialog_data.get('full_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
    logger.info(f"üéì –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç: {dialog_data.get('university', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
    logger.info(f"üìö –ö—É—Ä—Å: {dialog_data.get('course', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
    logger.info(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {dialog_data.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
    logger.info(f"üìß Email: {dialog_data.get('email', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ submitted
    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    def get_department_and_position_data(priority_num):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞, –ø–æ–¥-–æ—Ç–¥–µ–ª–∞ –∏ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
        dept_key = dialog_data.get(f"priority_{priority_num}_department")
        subdept_key = dialog_data.get(f"priority_{priority_num}_subdepartment")
        pos_index = dialog_data.get(f"priority_{priority_num}_position")
        
        logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority_num}: dept={dept_key}, subdept={subdept_key}, pos={pos_index}")
        
        if not dept_key or pos_index is None:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority_num}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
            return None, None, None
            
        dept_data = config.selection.departments.get(dept_key, {})
        dept_name = dept_data.get("name", dept_key)
        subdept_name = None
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥-–æ—Ç–¥–µ–ª
        if subdept_key and "subdepartments" in dept_data:
            subdept_data = dept_data["subdepartments"].get(subdept_key, {})
            subdept_name = subdept_data.get("name", subdept_key)
            positions_list = subdept_data.get("positions", [])
            logger.info(f"üìÇ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority_num}: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥-–æ—Ç–¥–µ–ª '{subdept_name}' —Å {len(positions_list)} –ø–æ–∑–∏—Ü–∏—è–º–∏")
        else:
            # –ë–µ—Ä–µ–º –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –æ—Ç–¥–µ–ª–∞
            positions_list = dept_data.get("positions", [])
            logger.info(f"üìÇ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority_num}: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª '{dept_name}' —Å {len(positions_list)} –ø–æ–∑–∏—Ü–∏—è–º–∏")
        
        try:
            position_name = positions_list[int(pos_index)]
            logger.info(f"‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority_num}: –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è '{position_name}' –ø–æ –∏–Ω–¥–µ–∫—Å—É {pos_index}")
        except (IndexError, ValueError) as e:
            position_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è"
            logger.error(f"‚ùå –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority_num}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É {pos_index}: {e}")
            logger.error(f"‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {positions_list}")
            
        return dept_name, subdept_name, position_name
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –¥–ª—è –ë–î
    db_department_1, db_subdepartment_1, db_position_1 = get_department_and_position_data(1)
    db_department_2, db_subdepartment_2, db_position_2 = get_department_and_position_data(2)
    db_department_3, db_subdepartment_3, db_position_3 = get_department_and_position_data(3)

    logger.info(f"üéØ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:")
    logger.info(f"   1) {db_department_1} - {db_position_1} (–ø–æ–¥-–æ—Ç–¥–µ–ª: {db_subdepartment_1})")
    logger.info(f"   2) {db_department_2} - {db_position_2} (–ø–æ–¥-–æ—Ç–¥–µ–ª: {db_subdepartment_2})")
    logger.info(f"   3) {db_department_3} - {db_position_3} (–ø–æ–¥-–æ—Ç–¥–µ–ª: {db_subdepartment_3})")
    
    try:
        # Ensure application row exists
        await db.applications.create_application(user_id=event_from_user.id)
        await db.applications.update_first_stage_form(
            user_id=event_from_user.id,
            full_name=dialog_data.get("full_name", ""),
            university=dialog_data.get("university", ""),
            course=int(dialog_data.get("course", "1")),
            phone=dialog_data.get("phone", ""),
            email=dialog_data.get("email", ""),
            telegram_username=event_from_user.username or "",
            how_found_kbk=how_found_text,
            department_1=db_department_1,
            position_1=db_position_1,
            subdepartment_1=db_subdepartment_1,
            department_2=db_department_2,
            position_2=db_position_2,
            subdepartment_2=db_subdepartment_2,
            department_3=db_department_3,
            position_3=db_position_3,
            subdepartment_3=db_subdepartment_3,
            experience=dialog_data.get("experience", ""),
            motivation=dialog_data.get("motivation", ""),
            resume_local_path=resume_local_path,
            resume_google_drive_url=resume_google_drive_url,
            previous_department=previous_department_text
        )
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ submitted
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ SUBMITTED...")
        await db.users.set_submission_status(user_id=event_from_user.id, status="submitted")
        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ SUBMITTED")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
        logger.error(f"üìã –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏: {dialog_data}")
        return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    logger.info(f"üì§ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞...")
    
    application_data = {
        'timestamp': datetime.now().isoformat(),
        'user_id': event_from_user.id,
        'username': event_from_user.username or "",
        'full_name': dialog_data.get("full_name", ""),
        'university': dialog_data.get("university", ""),
        'course': dialog_data.get("course", "1"),
        'phone': dialog_data.get("phone", ""),
        'email': dialog_data.get("email", ""),
        'how_found_kbk': how_found_text,
        'previous_department': previous_department_text,
        # –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–¥-–æ—Ç–¥–µ–ª–æ–≤
        'department_1': db_department_1 or "",
        'position_1': db_position_1 or "",
        'subdepartment_1': db_subdepartment_1 or "",
        'department_2': db_department_2 or "",
        'position_2': db_position_2 or "",
        'subdepartment_2': db_subdepartment_2 or "",
        'department_3': db_department_3 or "",
        'position_3': db_position_3 or "",
        'subdepartment_3': db_subdepartment_3 or "",
        'priorities': priorities_text,
        'experience': dialog_data.get("experience", ""),
        'motivation': dialog_data.get("motivation", ""),
        'status': 'submitted',
        'resume_local_path': resume_local_path or "",
        'resume_google_drive_url': resume_google_drive_url or ""
    }
    
    logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV –¥–ª—è –±–µ–∫–∞–ø–∞
    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ CSV...")
    try:
        await save_to_csv(application_data)
        logger.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ CSV")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ CSV: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Google Sheets –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
    if config.google:
        logger.info(f"‚òÅÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets...")
        try:
            from app.services.google_services import GoogleServicesManager
            google_manager = GoogleServicesManager(
                credentials_path=config.google.credentials_path,
                spreadsheet_id=config.google.spreadsheet_id,
                drive_folder_id=config.google.drive_folder_id,
                enable_drive=config.google.enable_drive
            )
            logger.info(f"üìä GoogleServicesManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (Drive: {'–≤–∫–ª—é—á–µ–Ω' if config.google.enable_drive else '–æ—Ç–∫–ª—é—á–µ–Ω'})")
            
            success = await google_manager.add_application_to_sheet(application_data)
            if success:
                logger.info("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ Google Sheets")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Google Sheets: {e}")
            if "quotaExceeded" in str(e):
                logger.error("üí° –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã Google Sheets API")
            elif "403" in str(e):
                logger.error("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets")
            elif "404" in str(e):
                logger.error("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã Google Sheets")
    else:
        logger.info("‚ÑπÔ∏è Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç")
    
    logger.info(f"üéâ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event_from_user.id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")


async def save_to_csv(application_data: dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª"""
    import csv
    logger.info(f"üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        backup_dir = "app/storage/backups"
        os.makedirs(backup_dir, exist_ok=True)
        logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {backup_dir} –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞")
        
        csv_path = f"{backup_dir}/applications.csv"
        file_exists = os.path.exists(csv_path)
        
        logger.info(f"üìÑ –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É: {csv_path}")
        logger.info(f"üìÑ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_exists}")
        
        with open(csv_path, 'a', newline='', encoding='utf-8') as csvfile:
            fieldnames = [
                'timestamp', 'user_id', 'username', 'full_name', 'university', 
                'course', 'phone', 'email', 'how_found_kbk', 'previous_department',
                'department_1', 'subdepartment_1', 'position_1', 
                'department_2', 'subdepartment_2', 'position_2', 
                'department_3', 'subdepartment_3', 'position_3', 
                'priorities', 'experience', 'motivation', 'status', 
                'resume_local_path', 'resume_google_drive_url'
            ]
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            
            if not file_exists:
                logger.info("üìã –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ CSV —Ñ–∞–π–ª–∞...")
                writer.writeheader()
            
            logger.info("üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ CSV...")
            writer.writerow(application_data)
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ CSV")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ CSV: {e}")
        raise


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å dialogs.py
async def on_apply_clicked(callback: CallbackQuery, button, dialog_manager: DialogManager):
    """–ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    logger.info(f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏")
    await callback.message.edit_caption("<b>–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–Ω–∫–µ—Ç—ã:</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π /menu, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç."
                                     "\n\n–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É —Ç–µ–±—è –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã.")
    await callback.message.answer("<b>–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–Ω–∫–µ—Ç—ã:</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π /menu, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç."
                                     "\n\n–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É —Ç–µ–±—è –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã.")
    await dialog_manager.switch_to(state=FirstStageSG.full_name, show_mode=ShowMode.SEND)

async def on_full_name_input(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏"""
    full_name = message.text.strip()
    logger.info(f"üë§ –ü–æ–ª—É—á–µ–Ω–æ –§–ò–û: {full_name} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –§–ò–û –Ω–∞ —á–∞—Å—Ç–∏ (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)
    name_parts = full_name.split()
    
    if len(name_parts) >= 1:
        surname = name_parts[0]  # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - —Ñ–∞–º–∏–ª–∏—è
        dialog_manager.dialog_data["surname"] = surname
        logger.info(f"   üìù –§–∞–º–∏–ª–∏—è: {surname}")
    else:
        dialog_manager.dialog_data["surname"] = "User"
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ñ–∞–º–∏–ª–∏—é –∏–∑: {full_name}")
    
    if len(name_parts) >= 2:
        name = name_parts[1]  # –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å - –∏–º—è
        dialog_manager.dialog_data["name"] = name
        logger.info(f"   üìù –ò–º—è: {name}")
    else:
        dialog_manager.dialog_data["name"] = "Unknown"
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –∏–∑: {full_name}")
    
    if len(name_parts) >= 3:
        patronymic = name_parts[2]  # –¢—Ä–µ—Ç—å—è —á–∞—Å—Ç—å - –æ—Ç—á–µ—Å—Ç–≤–æ
        dialog_manager.dialog_data["patronymic"] = patronymic
        logger.info(f"   üìù –û—Ç—á–µ—Å—Ç–≤–æ: {patronymic}")
    else:
        dialog_manager.dialog_data["patronymic"] = ""  # –û—Ç—á–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
        logger.info(f"   üìù –û—Ç—á–µ—Å—Ç–≤–æ: –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
    dialog_manager.dialog_data["full_name"] = full_name
    
    logger.info(f"‚úÖ –§–ò–û —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await dialog_manager.next()

async def on_university_input(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞"""
    university = message.text.strip()
    logger.info(f"üè´ –ü–æ–ª—É—á–µ–Ω —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç: {university} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    dialog_manager.dialog_data["university"] = university
    await dialog_manager.next()

async def on_phone_input(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.text.strip()
    logger.info(f"üìû –ü–æ–ª—É—á–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω: {phone} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if len(phone) >= 10:
        dialog_manager.dialog_data["phone"] = phone
        await dialog_manager.next()
    else:
        logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {phone}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä)")

async def on_email_input(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email"""
    email = message.text.strip()
    logger.info(f"üìß –ü–æ–ª—É—á–µ–Ω email: {email} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    if "@" in email and "." in email:
        dialog_manager.dialog_data["email"] = email
        await dialog_manager.next()
    else:
        logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {email}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å")

async def on_course_selected(callback: CallbackQuery, widget, dialog_manager: DialogManager, item_id, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞"""
    logger.info(f"üìö –í—ã–±—Ä–∞–Ω –∫—É—Ä—Å: {item_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    dialog_manager.dialog_data["course"] = item_id
    await dialog_manager.next()

async def on_how_found_selected(callback: CallbackQuery, widget, dialog_manager: DialogManager, item_id, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —É–∑–Ω–∞–≤–∞–Ω–∏—è –æ –ö–ë–ö"""
    logger.info(f"üîç –í—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± —É–∑–Ω–∞–≤–∞–Ω–∏—è: {item_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    dialog_manager.dialog_data["how_found_kbk"] = item_id
    await dialog_manager.next()

async def on_department_selected(callback: CallbackQuery, widget, dialog_manager: DialogManager, item_id, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞"""
    logger.info(f"üè¢ –í—ã–±—Ä–∞–Ω –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {item_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    dialog_manager.dialog_data["selected_department"] = item_id
    await dialog_manager.next()

async def on_position_selected(callback: CallbackQuery, widget, dialog_manager: DialogManager, item_id, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
    logger.info(f"üíº –í—ã–±—Ä–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: {item_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    dialog_manager.dialog_data["selected_position"] = item_id
    await dialog_manager.next()

async def on_experience_input(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø—ã—Ç–∞"""
    experience = message.text.strip()
    logger.info(f"üíº –ü–æ–ª—É—á–µ–Ω –æ–ø—ã—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {len(experience)} —Å–∏–º–≤–æ–ª–æ–≤")
    dialog_manager.dialog_data["experience"] = experience
    await dialog_manager.next()

async def on_motivation_input(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏"""
    motivation = message.text.strip()
    logger.info(f"üí≠ –ü–æ–ª—É—á–µ–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {len(motivation)} —Å–∏–º–≤–æ–ª–æ–≤")
    dialog_manager.dialog_data["motivation"] = motivation
    await dialog_manager.next()

async def on_resume_uploaded(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—é–º–µ"""
    logger.info(f"üìé –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—é–º–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await process_resume_file(message, widget, dialog_manager, **kwargs)


async def on_skip_resume(callback: CallbackQuery, button, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—é–º–µ"""
    logger.info(f"‚è≠Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∑—é–º–µ")
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ
    dialog_manager.dialog_data.pop("resume_file_id", None)
    dialog_manager.dialog_data.pop("resume_filename", None)
    dialog_manager.dialog_data.pop("resume_text", None)
    await callback.answer("‚úÖ –†–µ–∑—é–º–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ!")
    await dialog_manager.switch_to(FirstStageSG.confirmation)


async def on_yes_previous_kbk(callback: CallbackQuery, button, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ '–î–∞' –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ö–ë–ö"""
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ö–ë–ö")
    dialog_manager.dialog_data["was_in_kbk"] = True
    await callback.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ!")
    await dialog_manager.switch_to(FirstStageSG.previous_department)


async def on_no_previous_kbk(callback: CallbackQuery, button, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ '–ù–µ—Ç' –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ö–ë–ö"""
    logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ù–ï —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ö–ë–ö")
    dialog_manager.dialog_data["was_in_kbk"] = False
    await callback.answer("‚úÖ –ü–æ–Ω—è—Ç–Ω–æ!")
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞ –ö–ë–ö –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤–∞–∫–∞–Ω—Å–∏–π
    await dialog_manager.start("job_selection", data=dialog_manager.dialog_data)


async def on_submit_application(callback: CallbackQuery, button, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏"""
    logger.info(f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —Ñ–∏–Ω–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É")
    await save_application(dialog_manager)
    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    await dialog_manager.switch_to(FirstStageSG.success)


async def on_back_to_menu(callback: CallbackQuery, button, dialog_manager: DialogManager):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    logger.info(f"üè† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await callback.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é")
    # –¢—É—Ç –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–∏–∞–ª–æ–≥–∞
    await dialog_manager.done()


# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ "–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –ö–ë–ö"
async def on_how_found_state_changed(callback: CallbackQuery, widget, dialog_manager: DialogManager, *args, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ Multiselect"""
    logger.info(f"üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∏–∑–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ö–ë–ö")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ Multiselect
    multiselect = dialog_manager.find("how_found_multiselect")
    if multiselect:
        checked_items = multiselect.get_checked()
        logger.info(f"üì¢ –¢–µ–∫—É—â–∏–µ –≤—ã–±–æ—Ä—ã: {checked_items}")
        logger.info(f"üì¢ –¢–∏–ø checked_items: {type(checked_items)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ dialog_data –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º (–∫–∞–∫ —Å–ø–∏—Å–æ–∫)
        dialog_manager.dialog_data["how_found_selections"] = list(checked_items)
        logger.info(f"üì¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ dialog_data: {dialog_manager.dialog_data.get('how_found_selections')}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ middleware_data –¥–ª—è Redis
        if "dialog_data" not in dialog_manager.middleware_data:
            dialog_manager.middleware_data["dialog_data"] = {}
        dialog_manager.middleware_data["dialog_data"]["how_found_selections"] = list(checked_items)
        logger.info(f"üì¢ –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ middleware_data –¥–ª—è Redis")
    else:
        logger.error(f"‚ùå Multiselect widget 'how_found_multiselect' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "loading"
    await callback.answer()


async def on_how_found_toggled(callback: CallbackQuery, widget, dialog_manager: DialogManager, item_id, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ Multiselect (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π)"""
    logger.info(f"üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∏–∑–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä –æ–ø—Ü–∏–∏: {item_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ Multiselect
    multiselect = dialog_manager.find("how_found_multiselect")
    if multiselect:
        checked_items = multiselect.get_checked()
        logger.info(f"üì¢ –¢–µ–∫—É—â–∏–µ –≤—ã–±–æ—Ä—ã: {checked_items}")
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ dialog_data –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º (–∫–∞–∫ —Å–ø–∏—Å–æ–∫)
    dialog_manager.dialog_data["how_found_selections"] = list(checked_items)


async def on_how_found_continue(callback: CallbackQuery, widget, dialog_manager: DialogManager, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–∞–ª–µ–µ' –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ö–ë–ö"""
    logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª '–î–∞–ª–µ–µ' –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –∏–∑ Multiselect –≤–∏–¥–∂–µ—Ç–∞
    multiselect = dialog_manager.find("how_found_multiselect")
    checked_items = []
    
    if multiselect:
        checked_items = multiselect.get_checked()
        logger.info(f"üì¢ –ù–∞–π–¥–µ–Ω multiselect, checked_items: {checked_items}")
    else:
        logger.warning(f"‚ùå Multiselect not found!")
        
    # –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ dialog_data (–¥–ª—è Redis)
    saved_selections = dialog_manager.dialog_data.get("how_found_selections", [])
    logger.info(f"üì¢ –ò–∑ dialog_data: {saved_selections}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç —Å–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—É—Å—Ç–æ–π
    if not checked_items and saved_selections:
        checked_items = list(saved_selections)
        logger.info(f"üì¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤—ã–±–æ—Ä—ã: {checked_items}")
    
    logger.info(f"üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–≤–µ—Ä—à–∏–ª –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {checked_items}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤—ã–±–æ—Ä
    if not checked_items:
        await callback.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ dialog_data –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –∫–æ–¥–∞ (–∫–∞–∫ —Å–ø–∏—Å–æ–∫)
    dialog_manager.dialog_data["how_found_selections"] = list(checked_items)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤—ã–±—Ä–∞–ª "–†–∞–Ω–µ–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ö–ë–ö" (–∏–Ω–¥–µ–∫—Å 6), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–∫–Ω–æ previous_department
    if "6" not in checked_items:
        logger.info(f"‚è≠Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ö–ë–ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–¥–µ–ª–∞")
        await callback.message.edit_text(
            text="–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥–æ 3-—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–µ–ª –±—ã —Å–µ–±—è –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å.\n\n" \
                "–ù–µ –∑–∞–±—É–¥—å —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –∏—Ö –ø–æ —É—Ä–æ–≤–Ω—é –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Ññ1 ‚Äî —Å–∞–º–æ–µ –∂–µ–ª–∞–Ω–Ω–æ–µ.\n\n" \
                "–ï—Å–ª–∏ —Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ—à—å –æ—Ç–±–æ—Ä –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, —Ç–æ –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ç–µ–±—è –≤ –æ—Ç–¥–µ–ª —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º!\n\n" \
                "<b>–ü—Ä–∏–º–µ—Ä:</b> 1-–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî –æ—Ç–¥–µ–ª SMM&PR, 2-–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî –æ—Ç–¥–µ–ª –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, 3-–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî –æ—Ç–¥–µ–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã&"
                                                    )
        await dialog_manager.start(JobSelectionSG.select_department, show_mode=ShowMode.SEND)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ –∏ –∏–¥–µ–º –∫ experience
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–∫–Ω—É (previous_department)
    await dialog_manager.next()


async def on_previous_department_selected(callback: CallbackQuery, widget, dialog_manager: DialogManager, item_id, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—á–∞—Å—Ç–∏—è –≤ –ö–ë–ö"""
    logger.info(f"üè¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–¥–µ–ª: {item_id}")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∫–ª—é—á, –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è (–¥–ª—è legacy —Å–ø–∏—Å–∫–æ–≤)
    dialog_manager.dialog_data["previous_department"] = item_id
    try:
        # widget should be Radio; get item text
        item = widget.get_checked() if hasattr(widget, "get_checked") else None
    except Exception:
        item = None
    # –ù–∞–¥–µ–∂–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ data –∏–∑ getter'–∞, –Ω–æ –ø—Ä–æ—â–µ ‚Äî –≤–∑—è—Ç—å –µ–≥–æ –∏–∑ callback.data –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º find
    # aiogram-dialog –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥ find –¥–ª—è Radio, –Ω–æ –∑–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ —Ç–µ–∫—É—â–∏—Ö items
    try:
        dm = dialog_manager
        data = await dm.middleware_data.get("dialog_data", {})  # may be empty
    except Exception:
        data = {}
    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –∏–º—è —á–µ—Ä–µ–∑ mapping –∏–∑ –Ω–∞—à–µ–≥–æ legacy getter: –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏–º –∫–∞—Ä—Ç—É
    legacy_map = {
        "legacy_program": "–û—Ç–¥–µ–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã",
        "legacy_creative": "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª",
        "legacy_partners": "–û—Ç–¥–µ–ª –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤",
        "legacy_smm_pr": "SMM&PR",
        "legacy_design": "–û—Ç–¥–µ–ª –¥–∏–∑–∞–π–Ω–∞",
        "legacy_logistics_it": "–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ –ò–¢",
        "legacy_cultural": "–ö—É–ª—å—Ç—É—Ä–Ω–æ-—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ—Ç–¥–µ–ª",
    }
    dialog_manager.dialog_data["previous_department_name"] = legacy_map.get(item_id, item_id)
    await callback.message.edit_text(
            text="–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥–æ 3-—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–µ–ª –±—ã —Å–µ–±—è –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å.\n\n" \
                "–ù–µ –∑–∞–±—É–¥—å —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –∏—Ö –ø–æ —É—Ä–æ–≤–Ω—é –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Ññ1 ‚Äî —Å–∞–º–æ–µ –∂–µ–ª–∞–Ω–Ω–æ–µ.\n\n" \
                "–ï—Å–ª–∏ —Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ—à—å –æ—Ç–±–æ—Ä –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, —Ç–æ –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ç–µ–±—è –≤ –æ—Ç–¥–µ–ª —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º!\n\n" \
                "<b>–ü—Ä–∏–º–µ—Ä:</b> 1-–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî –æ—Ç–¥–µ–ª SMM&PR, 2-–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî –æ—Ç–¥–µ–ª –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, 3-–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî –æ—Ç–¥–µ–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã."
                                                    )
    await dialog_manager.start(JobSelectionSG.select_department, show_mode=ShowMode.SEND)


# ======================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø
# ======================

async def on_edit_clicked(callback: CallbackQuery, button, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å' –Ω–∞ –æ–∫–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    logger.info(f"‚úèÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")
    await dialog_manager.switch_to(FirstStageSG.edit_menu)


async def on_edit_field_clicked(callback: CallbackQuery, button, dialog_manager: DialogManager):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π"""
    button_id = button.widget_id
    user_id = callback.from_user.id
    
    logger.info(f"‚úèÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è: {button_id}")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π
    if button_id == "edit_department":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –≤—ã–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        from app.bot.states.job_selection import JobSelectionSG
        logger.info(f"üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –≤—ã–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π")
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –í–°–ï —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤ –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π
        current_data = dict(dialog_manager.dialog_data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ start_data –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if dialog_manager.start_data:
            current_data.update(dialog_manager.start_data)
        
        # –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        current_data["is_editing"] = True
        
        logger.info(f"üîÑ –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π: {list(current_data.keys())}")
        await dialog_manager.start(JobSelectionSG.priorities_overview, data=current_data)
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –∫–Ω–æ–ø–∫–∏
    field_to_state = {
        "edit_full_name": FirstStageSG.edit_full_name,
        "edit_university": FirstStageSG.edit_university,
        "edit_course": FirstStageSG.edit_course,
        "edit_phone": FirstStageSG.edit_phone,
        "edit_email": FirstStageSG.edit_email,
        "edit_how_found": FirstStageSG.edit_how_found_kbk,
        "edit_experience": FirstStageSG.edit_experience,
        "edit_motivation": FirstStageSG.edit_motivation,
        "edit_resume": FirstStageSG.edit_resume_upload,
    }
    
    target_state = field_to_state.get(button_id)
    if target_state:
        await dialog_manager.switch_to(target_state)
    else:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {button_id}")


async def on_edit_full_name_input(message: Message, widget, dialog_manager: DialogManager, value, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û"""
    full_name = value.strip()
    logger.info(f"‚úèÔ∏èüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏–∑–º–µ–Ω–∏–ª –§–ò–û: {full_name}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–µ)
    name_parts = full_name.split()
    
    if len(name_parts) >= 1:
        dialog_manager.dialog_data["surname"] = name_parts[0]
    else:
        dialog_manager.dialog_data["surname"] = "User"
    
    if len(name_parts) >= 2:
        dialog_manager.dialog_data["name"] = name_parts[1]
    else:
        dialog_manager.dialog_data["name"] = "Unknown"
    
    if len(name_parts) >= 3:
        dialog_manager.dialog_data["patronymic"] = name_parts[2]
    else:
        dialog_manager.dialog_data["patronymic"] = ""
    
    dialog_manager.dialog_data["full_name"] = full_name
    
    await message.answer("‚úÖ –§–ò–û —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    await dialog_manager.switch_to(FirstStageSG.confirmation)


async def on_edit_university_input(message: Message, widget, dialog_manager: DialogManager, value, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞"""
    university = value.strip()
    logger.info(f"‚úèÔ∏èüè´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏–∑–º–µ–Ω–∏–ª —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç: {university}")
    dialog_manager.dialog_data["university"] = university
    await message.answer("‚úÖ –£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    await dialog_manager.switch_to(FirstStageSG.confirmation)


async def on_edit_course_selected(callback: CallbackQuery, widget, dialog_manager: DialogManager, item_id, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞"""
    logger.info(f"‚úèÔ∏èüìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∏–∑–º–µ–Ω–∏–ª –∫—É—Ä—Å: {item_id}")
    dialog_manager.dialog_data["course"] = item_id
    await callback.answer("‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
    await dialog_manager.switch_to(FirstStageSG.confirmation)


async def on_edit_phone_input(message: Message, widget, dialog_manager: DialogManager, value, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = value.strip()
    logger.info(f"‚úèÔ∏èüìû –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏–∑–º–µ–Ω–∏–ª —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}")
    
    if len(phone) >= 10:
        dialog_manager.dialog_data["phone"] = phone
        await message.answer("‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
        await dialog_manager.switch_to(FirstStageSG.confirmation)
    else:
        logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {phone}")
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä)")


async def on_edit_email_input(message: Message, widget, dialog_manager: DialogManager, value, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è email"""
    email = value.strip()
    logger.info(f"‚úèÔ∏èüìß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏–∑–º–µ–Ω–∏–ª email: {email}")
    
    if "@" in email and "." in email:
        dialog_manager.dialog_data["email"] = email
        await message.answer("‚úÖ Email —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
        await dialog_manager.switch_to(FirstStageSG.confirmation)
    else:
        logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {email}")
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å")


async def on_edit_how_found_state_changed(callback: CallbackQuery, widget, dialog_manager: DialogManager, *args, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    logger.info(f"‚úèÔ∏èüì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∏–∑–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ö–ë–ö")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ Multiselect
    multiselect = dialog_manager.find("edit_how_found_multi")
    if multiselect:
        checked_items = multiselect.get_checked()
        logger.info(f"üì¢ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä: {checked_items}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ dialog_data –∫–∞–∫ —Å–ø–∏—Å–æ–∫ (JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π)
        dialog_manager.dialog_data["how_found_selections"] = list(checked_items)


async def on_edit_how_found_continue(callback: CallbackQuery, widget, dialog_manager: DialogManager, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    multiselect = dialog_manager.find("edit_how_found_multi")
    
    if multiselect:
        checked_items = multiselect.get_checked()
        if not checked_items:
            await callback.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç", show_alert=True)
            return
        dialog_manager.dialog_data["how_found_selections"] = list(checked_items)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–†–∞–Ω–µ–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ö–ë–ö" (–∏–Ω–¥–µ–∫—Å 6)
        if "6" in checked_items:
            logger.info(f"‚è≠Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª '–†–∞–Ω–µ–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ö–ë–ö', –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–¥–µ–ª–∞")
            await callback.answer("‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            await dialog_manager.switch_to(FirstStageSG.edit_previous_department)
        else:
            # –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–ª —É—á–∞—Å—Ç–∏–µ –≤ –ö–ë–ö, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–¥–µ–ª–µ
            dialog_manager.dialog_data.pop("previous_department", None)
            dialog_manager.dialog_data.pop("previous_department_name", None)
            logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ö–ë–ö, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–¥–µ–ª–µ")
            await callback.answer("‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ö–ë–ö —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!")
            await dialog_manager.switch_to(FirstStageSG.confirmation)


async def on_edit_previous_department_selected(callback: CallbackQuery, widget, dialog_manager: DialogManager, item_id, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–¥–µ–ª–∞"""
    logger.info(f"‚úèÔ∏èüè¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∏–∑–º–µ–Ω–∏–ª –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–¥–µ–ª: {item_id}")
    dialog_manager.dialog_data["previous_department"] = item_id
    legacy_map = {
        "legacy_program": "–û—Ç–¥–µ–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã",
        "legacy_creative": "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª",
        "legacy_partners": "–û—Ç–¥–µ–ª –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤",
        "legacy_smm_pr": "SMM&PR",
        "legacy_design": "–û—Ç–¥–µ–ª –¥–∏–∑–∞–π–Ω–∞",
        "legacy_logistics_it": "–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ –ò–¢",
        "legacy_cultural": "–ö—É–ª—å—Ç—É—Ä–Ω–æ-—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ—Ç–¥–µ–ª",
    }
    dialog_manager.dialog_data["previous_department_name"] = legacy_map.get(item_id, item_id)
    await callback.answer("‚úÖ –ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–¥–µ–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
    await dialog_manager.switch_to(FirstStageSG.confirmation)


async def on_edit_experience_input(message: Message, widget, dialog_manager: DialogManager, value, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø—ã—Ç–∞"""
    experience = value.strip()
    logger.info(f"‚úèÔ∏èüíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏–∑–º–µ–Ω–∏–ª –æ–ø—ã—Ç: {len(experience)} —Å–∏–º–≤–æ–ª–æ–≤")
    dialog_manager.dialog_data["experience"] = experience
    await message.answer("‚úÖ –û–ø—ã—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
    await dialog_manager.switch_to(FirstStageSG.confirmation)


async def on_edit_motivation_input(message: Message, widget, dialog_manager: DialogManager, value, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏"""
    motivation = value.strip()
    logger.info(f"‚úèÔ∏èüí≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏–∑–º–µ–Ω–∏–ª –º–æ—Ç–∏–≤–∞—Ü–∏—é: {len(motivation)} —Å–∏–º–≤–æ–ª–æ–≤")
    dialog_manager.dialog_data["motivation"] = motivation
    await message.answer("‚úÖ –ú–æ—Ç–∏–≤–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
    await dialog_manager.switch_to(FirstStageSG.confirmation)


async def on_edit_resume_uploaded(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∑—é–º–µ"""
    logger.info(f"‚úèÔ∏èüìé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤–æ–µ —Ä–µ–∑—é–º–µ")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—é–º–µ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∏ —Ç–µ–∫—Å—Ç)
    await process_resume_file(message, widget, dialog_manager, **kwargs)
    await message.answer("‚úÖ –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    await dialog_manager.switch_to(FirstStageSG.confirmation)


async def on_skip_edit_resume(callback: CallbackQuery, button, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—é–º–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    logger.info(f"‚úèÔ∏è‚è≠Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∑—é–º–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    dialog_manager.dialog_data.pop("resume_file_id", None)
    dialog_manager.dialog_data.pop("resume_filename", None)
    dialog_manager.dialog_data.pop("resume_text", None)
    await callback.answer("‚úÖ –†–µ–∑—é–º–µ –Ω–µ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ!")
    await dialog_manager.switch_to(FirstStageSG.confirmation)


async def on_edit_department_selected(callback: CallbackQuery, widget, dialog_manager: DialogManager, item_id, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞"""
    logger.info(f"‚úèÔ∏èüè¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∏–∑–º–µ–Ω–∏–ª –æ—Ç–¥–µ–ª: {item_id}")
    dialog_manager.dialog_data["selected_department"] = item_id
    await callback.answer("‚úÖ –û—Ç–¥–µ–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤ –Ω–æ–≤–æ–º –æ—Ç–¥–µ–ª–µ
    await dialog_manager.switch_to(FirstStageSG.edit_position)


async def on_edit_position_selected(callback: CallbackQuery, widget, dialog_manager: DialogManager, item_id, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    logger.info(f"‚úèÔ∏èüíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∏–∑–º–µ–Ω–∏–ª –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {item_id}")
    dialog_manager.dialog_data["selected_position"] = item_id
    await callback.answer("‚úÖ –î–æ–ª–∂–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
    await dialog_manager.switch_to(FirstStageSG.confirmation)


async def on_back_to_confirmation(callback: CallbackQuery, button, dialog_manager: DialogManager):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –æ–∫–Ω—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    logger.info(f"üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é")
    await dialog_manager.switch_to(FirstStageSG.confirmation)


async def check_previous_participation_and_skip(dialog_manager: DialogManager):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ö–ë–ö —Ä–∞–Ω–µ–µ, –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –æ–∫–Ω–æ –µ—Å–ª–∏ –Ω–µ—Ç"""
    selections = dialog_manager.dialog_data.get("how_found_selections", [])
    
    # –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–ª "–†–∞–Ω–µ–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ö–ë–ö" (–∏–Ω–¥–µ–∫—Å 6), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–∫–Ω–æ
    if "6" not in selections:
        logger.info(f"‚è≠Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ö–ë–ö —Ä–∞–Ω–µ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–¥–µ–ª–∞")
        await dialog_manager.next()  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–∫–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–¥–µ–ª–∞
        return True
    
    return False
