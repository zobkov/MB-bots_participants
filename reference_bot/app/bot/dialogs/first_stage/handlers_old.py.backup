    # –ö—É—Ä—Å
    Window(
        Const("üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å</b>"),
        Column(
            Radio(
                Format("üîò {item[text]}"),
                Format("‚ö™ {item[text]}"),
                id="course_radio",
                item_id_getter=lambda item: item["id"],
                items="courses",
                on_click=on_course_selected
            ),
        ),
        state=FirstStageSG.course,
        getter=get_course_options
    ),
    


import os
import csv
import logging
from datetime import datetime
from typing import Any

from aiogram import Bot
from aiogram.types import Message, CallbackQuery, Document, User
from aiogram_dialog import DialogManager
from aiogram_dialog.widgets.input import MessageInput

from config.config import Config
from app.infrastructure.database.database.db import DB
from app.bot.enums.application_status import ApplicationStatus

logger = logging.getLogger(__name__)


async def on_apply_clicked(callback: CallbackQuery, button, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É'"""
    await dialog_manager.next()


async def on_full_name_input(message: Message, widget: MessageInput, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û"""
    dialog_manager.dialog_data["full_name"] = message.text
    await dialog_manager.next()


async def on_university_input(message: Message, widget: MessageInput, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è"""
    dialog_manager.dialog_data["university"] = message.text
    await dialog_manager.next()


async def on_phone_input(message: Message, widget: MessageInput, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    dialog_manager.dialog_data["phone"] = message.text
    await dialog_manager.next()


async def on_email_input(message: Message, widget: MessageInput, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ email"""
    dialog_manager.dialog_data["email"] = message.text
    await dialog_manager.next()


async def on_experience_input(message: Message, widget: MessageInput, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø—ã—Ç–∞"""
    dialog_manager.dialog_data["experience"] = message.text
    await dialog_manager.next()


async def on_motivation_input(message: Message, widget: MessageInput, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏"""
    dialog_manager.dialog_data["motivation"] = message.text
    await dialog_manager.next()


async def on_course_selected(callback: CallbackQuery, radio, dialog_manager: DialogManager, course_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞"""
    dialog_manager.dialog_data["course"] = course_id
    await dialog_manager.next()


async def on_how_found_selected(callback: CallbackQuery, radio, dialog_manager: DialogManager, option_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ '–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –ö–ë–ö'"""
    dialog_manager.dialog_data["how_found_kbk"] = option_id
    await dialog_manager.next()


async def on_department_selected(callback: CallbackQuery, radio, dialog_manager: DialogManager, dept_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª–∞"""
    dialog_manager.dialog_data["selected_department"] = dept_id
    await dialog_manager.next()


async def on_position_selected(callback: CallbackQuery, radio, dialog_manager: DialogManager, position_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    dialog_manager.dialog_data["selected_position"] = position_id
    await dialog_manager.next()


async def process_resume_file(message: Message, widget, dialog_manager: DialogManager, **kwargs):
    bot: Bot = dialog_manager.middleware_data["bot"]
    document: Document = message.document
    
    if not document:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 20 –ú–ë)
    if document.file_size > 20 * 1024 * 1024:
        await message.answer("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞
    dialog_data = dialog_manager.dialog_data
    surname = dialog_data.get("surname", "Unknown")
    name = dialog_data.get("name", "Unknown")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    user = message.from_user
    initials = f"{name[0]}{dialog_data.get('patronymic', [''])[0]}".upper()
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    file_extension = os.path.splitext(document.file_name)[1] if document.file_name else ".pdf"
    new_filename = f"{surname}_{initials}_{user.username or user.id}_{timestamp}{file_extension}"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç Telegram
        file = await bot.get_file(document.file_id)
        file_path = f"app/storage/resumes/{new_filename}"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await bot.download_file(file.file_path, file_path)
        logger.info(f"–§–∞–π–ª —Ä–µ–∑—é–º–µ —Å–∫–∞—á–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {file_path}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Google Drive
        try:
            from app.services.google_services import GoogleServicesManager
            google_manager = GoogleServicesManager()
            google_file_url = google_manager.upload_file_to_drive(
                local_file_path=file_path,
                drive_filename=new_filename
            )
            
            if google_file_url:
                logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Google Drive: {google_file_url}")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞
                dialog_manager.dialog_data["resume_file"] = new_filename
                dialog_manager.dialog_data["resume_google_url"] = google_file_url
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL —Ñ–∞–π–ª–∞ —Å Google Drive")
                dialog_manager.dialog_data["resume_file"] = new_filename
                dialog_manager.dialog_data["resume_google_error"] = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL —Ñ–∞–π–ª–∞"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—é–º–µ –≤ Google Drive: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –≤ Google Drive –Ω–µ —É–¥–∞–ª–∞—Å—å
            dialog_manager.dialog_data["resume_file"] = new_filename
            dialog_manager.dialog_data["resume_google_error"] = str(e)
        
        await message.answer(
            f"‚úÖ –†–µ–∑—é–º–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫: {new_filename}\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —Ä–µ–∑—é–º–µ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return


async def on_confirm_application(callback: CallbackQuery, button, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    await save_application(dialog_manager)
    await dialog_manager.next()


async def save_application(dialog_manager: DialogManager):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –ë–î –∏ —ç–∫—Å–ø–æ—Ä—Ç"""
    from aiogram.types import User
    
    event_from_user: User = dialog_manager.event.from_user
    dialog_data = dialog_manager.dialog_data
    config: Config = dialog_manager.middleware_data.get("config")
    db: DB = dialog_manager.middleware_data.get("db")
    
    if not config or not db:
        logger.error("–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ë–î")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤ process_resume_file)
    resume_local_path = None
    resume_google_drive_url = None
    
    resume_filename = dialog_data.get("resume_file")
    if resume_filename:
        resume_local_path = f"app/storage/resumes/{resume_filename}"
        resume_google_drive_url = dialog_data.get("resume_google_url", "")
    
    # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    how_found_idx = int(dialog_data.get("how_found_kbk", "0"))
    how_found_text = config.selection.how_found_options[how_found_idx] if how_found_idx < len(config.selection.how_found_options) else ""
    
    department_key = dialog_data.get("selected_department", "")
    department_name = config.selection.departments.get(department_key, {}).get("name", "")
    
    position_idx = int(dialog_data.get("selected_position", "0"))
    if department_key in config.selection.departments:
        positions = config.selection.departments[department_key]["positions"]
        position_text = positions[position_idx] if position_idx < len(positions) else ""
    else:
        position_text = ""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ submitted
    try:
        await db.applications.update_first_stage_form(
            user_id=event_from_user.id,
            full_name=dialog_data.get("full_name", ""),
            university=dialog_data.get("university", ""),
            course=int(dialog_data.get("course", "1")),
            phone=dialog_data.get("phone", ""),
            email=dialog_data.get("email", ""),
            telegram_username=event_from_user.username or "",
            how_found_kbk=how_found_text,
            department=department_name,
            position=position_text,
            experience=dialog_data.get("experience", ""),
            motivation=dialog_data.get("motivation", ""),
            resume_local_path=resume_local_path,
            resume_google_drive_url=resume_google_drive_url
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ SUBMITTED
        await db.applications.update_application_status(
            user_id=event_from_user.id,
            status=ApplicationStatus.SUBMITTED
        )
        
        logger.info(f"–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event_from_user.id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
        return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    application_data = {
        'timestamp': datetime.now().isoformat(),
        'user_id': event_from_user.id,
        'username': event_from_user.username or "",
        'full_name': dialog_data.get("full_name", ""),
        'university': dialog_data.get("university", ""),
        'course': dialog_data.get("course", "1"),
        'phone': dialog_data.get("phone", ""),
        'email': dialog_data.get("email", ""),
        'how_found_kbk': how_found_text,
        'department': department_name,
        'position': position_text,
        'experience': dialog_data.get("experience", ""),
        'motivation': dialog_data.get("motivation", ""),
        'status': 'submitted',
        'resume_local_path': resume_local_path or "",
        'resume_google_drive_url': resume_google_drive_url or ""
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV –¥–ª—è –±–µ–∫–∞–ø–∞
    await save_to_csv(application_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Google Sheets –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
    if config.google:
        try:
            from app.services.google_services import GoogleServicesManager
            google_manager = GoogleServicesManager()
            success = google_manager.add_application_to_sheet(application_data)
            if success:
                logger.info("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets")
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ Google Sheets")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Google Sheets: {e}")
    
    if not config or not db:
        print("–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ë–î")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ middleware_data
    bot: Bot = dialog_manager.middleware_data.get("bot")
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ä–µ–∑—é–º–µ
    resume_local_path = None
    resume_google_drive_url = None
    
    if "resume_file_id" in dialog_data and bot:
        try:
            file_info = await bot.get_file(dialog_data["resume_file_id"])
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—é–º–µ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs("app/storage/resumes", exist_ok=True)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ —Ñ–∞–º–∏–ª–∏–∏, –∏–Ω–∏—Ü–∏–∞–ª–∞–º –∏ username
            full_name = dialog_data.get("full_name", "").strip()
            username = event_from_user.username or str(event_from_user.id)
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            file_extension = os.path.splitext(dialog_data["resume_file_name"])[1]
            
            # –ü–∞—Ä—Å–∏–º –§–ò–û –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            name_parts = full_name.split()
            if len(name_parts) >= 2:
                surname = name_parts[0]
                initials = "".join([part[0] for part in name_parts[1:] if part])
                file_base_name = f"{surname}_{initials}_{username}"
            else:
                file_base_name = f"{full_name.replace(' ', '_')}_{username}" if full_name else f"user_{username}"
            
            local_filename = f"{file_base_name}_{timestamp}{file_extension}"
            resume_local_path = f"app/storage/resumes/{local_filename}"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await bot.download_file(file_info.file_path, resume_local_path)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ Google Drive –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
            if config.google:
                try:
                    from app.services.google_services import setup_google_services
                    google_manager = await setup_google_services()
                    if google_manager:
                        drive_filename = f"{file_base_name}_{timestamp}{file_extension}"
                        resume_google_drive_url = await google_manager.upload_file_to_drive(
                            resume_local_path, drive_filename
                        )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—é–º–µ –Ω–∞ Google Drive: {e}")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    how_found_idx = int(dialog_data.get("how_found_kbk", "0"))
    how_found_text = config.selection.how_found_options[how_found_idx] if how_found_idx < len(config.selection.how_found_options) else ""
    
    department_key = dialog_data.get("selected_department", "")
    department_name = config.selection.departments.get(department_key, {}).get("name", "")
    
    position_idx = int(dialog_data.get("selected_position", "0"))
    if department_key in config.selection.departments:
        positions = config.selection.departments[department_key]["positions"]
        position_text = positions[position_idx] if position_idx < len(positions) else ""
    else:
        position_text = ""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ submitted
    try:
        await db.applications.update_first_stage_form(
            user_id=event_from_user.id,
            full_name=dialog_data.get("full_name", ""),
            university=dialog_data.get("university", ""),
            course=int(dialog_data.get("course", "1")),
            phone=dialog_data.get("phone", ""),
            email=dialog_data.get("email", ""),
            telegram_username=event_from_user.username or "",
            how_found_kbk=how_found_text,
            department=department_name,
            position=position_text,
            experience=dialog_data.get("experience", ""),
            motivation=dialog_data.get("motivation", ""),
            resume_local_path=resume_local_path,
            resume_google_drive_url=resume_google_drive_url
        )
        
        # –°—Ç–∞—Ç—É—Å —É–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ update_first_stage_form –∫–∞–∫ STAGE_1
        # –ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞ SUBMITTED –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        await db.applications.update_application_status(
            user_id=event_from_user.id,
            status=ApplicationStatus.SUBMITTED
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
        return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    application_data = {
        'timestamp': datetime.now().isoformat(),
        'user_id': event_from_user.id,
        'username': event_from_user.username or "",
        'full_name': dialog_data.get("full_name", ""),
        'university': dialog_data.get("university", ""),
        'course': dialog_data.get("course", "1"),
        'phone': dialog_data.get("phone", ""),
        'email': dialog_data.get("email", ""),
        'how_found_kbk': how_found_text,
        'department': department_name,
        'position': position_text,
        'experience': dialog_data.get("experience", ""),
        'motivation': dialog_data.get("motivation", ""),
        'status': 'submitted',
        'resume_local_path': resume_local_path or "",
        'resume_google_drive_url': resume_google_drive_url or ""
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV –¥–ª—è –±–µ–∫–∞–ø–∞
    await save_to_csv(application_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Google Sheets –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
    if config.google:
        try:
            from app.services.google_services import setup_google_services
            google_manager = await setup_google_services()
            if google_manager:
                await google_manager.add_application_to_sheet(application_data)
        except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Google Sheets: {e}")


async def save_to_csv(application_data: dict):


async def save_to_csv(application_data: dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª"""
    os.makedirs("app/storage/backups", exist_ok=True)
    
    csv_path = "app/storage/backups/applications.csv"
    file_exists = os.path.exists(csv_path)
    
    with open(csv_path, 'a', newline='', encoding='utf-8') as csvfile:
        fieldnames = [
            'timestamp', 'user_id', 'username', 'full_name', 'university', 
            'course', 'phone', 'email', 'how_found_kbk', 'department', 
            'position', 'experience', 'motivation', 'status', 
            'resume_local_path', 'resume_google_drive_url'
        ]
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        
        if not file_exists:
            writer.writeheader()
        
        writer.writerow(application_data)
