from datetime import datetime
from typing import Dict, Any

from aiogram.types import User
from aiogram_dialog import DialogManager
from aiogram_dialog.api.entities import MediaAttachment, MediaId
from aiogram.enums import ContentType

from config.config import Config
from app.infrastructure.database.database.db import DB
from app.utils.optimized_dialog_widgets import get_file_id_for_path


async def get_user_info(dialog_manager: DialogManager, event_from_user: User, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    
    return {
        "user_id": event_from_user.id,
        "username": event_from_user.username or "",
        "first_name": event_from_user.first_name or "",
        "last_name": event_from_user.last_name or "",
    }


async def get_current_stage_info(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —ç—Ç–∞–ø–µ –æ—Ç–±–æ—Ä–∞"""
    config: Config = dialog_manager.middleware_data.get("config")
    db: DB = dialog_manager.middleware_data.get("db")
    event_from_user: User = dialog_manager.event.from_user
    
    if not config:
        return {
            "current_stage": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "current_stage_description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
            "is_active": False
        }
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users (submission_status)
    application_submitted = False
    try:
        if db:
            user_record = await db.users.get_user_record(user_id=event_from_user.id)
            application_submitted = bool(user_record and user_record.submission_status == "submitted")
    except Exception:
        application_submitted = False
    
    now = datetime.now()
    current_stage = None
    current_stage_info = None
    next_stage_info = None
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç—Ç–∞–ø—ã –ø–æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞
    sorted_stages = sorted(
        config.selection.stages.items(),
        key=lambda x: datetime.fromisoformat(x[1]["start_date"])
    )
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
    for i, (stage_key, stage_data) in enumerate(sorted_stages):
        start_date = datetime.fromisoformat(stage_data["start_date"])
        end_date = datetime.fromisoformat(stage_data["end_date"])
        
        if start_date <= now <= end_date:
            current_stage = stage_key
            current_stage_info = stage_data
            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
            if i + 1 < len(sorted_stages):
                next_stage_info = sorted_stages[i + 1][1]
            break
    
    if not current_stage:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—É–¥—É—â–∏–µ —ç—Ç–∞–ø—ã
        for stage_key, stage_data in sorted_stages:
            start_date = datetime.fromisoformat(stage_data["start_date"])
            if now < start_date:
                current_stage = stage_key
                current_stage_info = stage_data
                current_stage_info["status"] = "upcoming"
                break
    
    if not current_stage_info:
        current_stage_info = {
            "name": "–û—Ç–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω",
            "description": "–í—Å–µ —ç—Ç–∞–ø—ã –æ—Ç–±–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã",
            "status": "completed"
        }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö
    deadline_info = ""
    if current_stage_info and current_stage != "completed":
        if "start_date" in current_stage_info and current_stage_info.get("status") == "upcoming":
            # –î–ª—è –±—É–¥—É—â–∏—Ö —ç—Ç–∞–ø–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
            start_date = datetime.fromisoformat(current_stage_info["start_date"])
            deadline_info = f"üöÄ –ù–∞—á–∞–ª–æ: {start_date.strftime('%d.%m.%Y, %H:%M')}"
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ –Ω–∞—á–∞–ª–∞
            time_until = start_date - now
            if time_until.days > 0:
                deadline_info += f"\n‚è≥ –î–æ –Ω–∞—á–∞–ª–∞: {time_until.days} –¥–Ω."
            elif time_until.seconds > 3600:
                hours_until = time_until.seconds // 3600
                deadline_info += f"\n‚è≥ –î–æ –Ω–∞—á–∞–ª–∞: {hours_until} —á."
        elif "end_date" in current_stage_info:
            # –î–ª—è —Ç–µ–∫—É—â–∏—Ö —ç—Ç–∞–ø–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–¥–ª–∞–π–Ω –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
            end_date = datetime.fromisoformat(current_stage_info["end_date"])
            
            if application_submitted and "results_date" in current_stage_info:
                # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–≥–¥–∞ –ø—Ä–∏–¥—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results_date = datetime.fromisoformat(current_stage_info["results_date"])
                deadline_info = f"–ì–æ—Ç–æ–≤–æ! –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–¥—É—Ç: <b>{results_date.strftime('%d.%m.%Y, %H:%M')}</b>"
            else:
                # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–µ –ø–æ–¥–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–¥–ª–∞–π–Ω
                deadline_info = f"–ü–æ–¥–∞–π –∑–∞—è–≤–∫—É –¥–æ <b>{end_date.strftime('%d.%m.%Y, %H:%M')}</b>, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É"
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            """ –£–±—Ä–∞–ª "–û—Å—Ç–∞–ª–æ—å ... –¥–Ω" —Ç–∞–∫ –∫–∞–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            time_left = end_date - now
            if time_left.days > 7:
                deadline_info += f"\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {time_left.days} –¥–Ω."
            elif time_left.days > 0:
                deadline_info += f"\nüî• <b>–û—Å—Ç–∞–ª–æ—Å—å: {time_left.days} –¥–Ω.</b>"
            elif time_left.seconds > 3600:
                hours_left = time_left.seconds // 3600
                deadline_info += f"\nüî• <b>–û—Å—Ç–∞–ª–æ—Å—å: {hours_left} —á.</b>"
            elif time_left.seconds > 0:
                deadline_info += f"\nüö® <b>–û—Å—Ç–∞–ª–æ—Å—å: –º–µ–Ω–µ–µ —á–∞—Å–∞!</b>"
            else:
                deadline_info += f"\n‚ùå <b>–î–µ–¥–ª–∞–π–Ω –∏—Å—Ç–µ–∫</b>"
            """
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ
    next_stage_text = ""
    if next_stage_info and current_stage_info.get("status") != "upcoming":
        next_start = datetime.fromisoformat(next_stage_info["start_date"])
        next_stage_text = f"\n\nüìã <b>–°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø:</b> {next_stage_info['name']}\nüöÄ <b>–ù–∞—á–∞–ª–æ:</b> {next_start.strftime('%d.%m.%Y, %H:%M')}"
    
    return {
        "current_stage": current_stage or "completed",
        "stage_name": current_stage_info["name"],
        "stage_description": current_stage_info.get("description", "") + next_stage_text,
        "stage_status": current_stage_info.get("status", "active"),
        "deadline_info": deadline_info
    }


async def get_application_status(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    event_from_user: User = dialog_manager.event.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç DB –∏–∑ middleware_data
    db: DB = dialog_manager.middleware_data.get("db")
    
    if not db:
        return {
            "application_status": "not_submitted",
            "status_text": "–ó–∞—è–≤–∫–∞ –Ω–µ –ø–æ–¥–∞–Ω–∞",
            "can_apply": True
        }
    
    try:
        # Ensure application row exists for form fields (no status stored here)
        await db.applications.create_application(user_id=event_from_user.id)
        user_record = await db.users.get_user_record(user_id=event_from_user.id)
        application_status = (user_record.submission_status if user_record else "not_submitted")
        status_text = {
            "not_submitted": "–ó–∞—è–≤–∫–∞ –Ω–µ –ø–æ–¥–∞–Ω–∞",
            "submitted": "–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞"
        }.get(application_status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        application_status = "not_submitted"
        status_text = "–ó–∞—è–≤–∫–∞ –Ω–µ –ø–æ–¥–∞–Ω–∞"
    
    return {
        "application_status": application_status,
        "status_text": status_text,
        "can_apply": application_status == "not_submitted"
    }


async def get_support_contacts(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    config: Config = dialog_manager.middleware_data.get("config")
    
    if not config:
        return {
            "general_support": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
            "technical_support": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
            "hr_support": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        }
    
    return {
        "general_support": config.selection.support_contacts["general"],
        "technical_support": config.selection.support_contacts["technical"],
        "hr_support": config.selection.support_contacts["hr"]
    }


async def get_main_menu_media(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    file_id = get_file_id_for_path("main_menu/main_menu.jpg")
    
    if file_id:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º file_id –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        media = MediaAttachment(
            type=ContentType.PHOTO,
            file_id=MediaId(file_id)
        )
    else:
        # Fallback –Ω–∞ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        media = MediaAttachment(
            type=ContentType.PHOTO,
            path="app/bot/assets/images/main_menu/main_menu.jpg"
        )
    
    return {
        "media": media
    }
