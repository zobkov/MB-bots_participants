"""
–ú–æ–¥—É–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫
"""
import logging
from datetime import datetime
from typing import Dict, List, Optional
import json
import os
from dataclasses import dataclass, asdict

logger = logging.getLogger(__name__)


@dataclass
class ErrorReport:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ"""
    timestamp: str
    error_type: str
    error_message: str
    user_id: Optional[int] = None
    username: Optional[str] = None
    context: Optional[str] = None
    severity: str = "ERROR"
    component: str = "UNKNOWN"
    resolved: bool = False


class ErrorMonitor:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫"""
    
    def __init__(self, log_file_path: str = "app/logs/error_reports.json"):
        self.log_file_path = log_file_path
        self.ensure_log_file_exists()
    
    def ensure_log_file_exists(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
        os.makedirs(os.path.dirname(self.log_file_path), exist_ok=True)
        if not os.path.exists(self.log_file_path):
            with open(self.log_file_path, 'w', encoding='utf-8') as f:
                json.dump([], f, ensure_ascii=False, indent=2)
    
    def log_error(
        self, 
        error_type: str,
        error_message: str,
        user_id: Optional[int] = None,
        username: Optional[str] = None,
        context: Optional[str] = None,
        severity: str = "ERROR",
        component: str = "UNKNOWN"
    ):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            error_type: –¢–∏–ø –æ—à–∏–±–∫–∏ (GoogleDriveError, DatabaseError, ValidationError –∏ —Ç.–¥.)
            error_message: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (–≥–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞)
            severity: –£—Ä–æ–≤–µ–Ω—å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ (ERROR, WARNING, CRITICAL)
            component: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∏—Å—Ç–µ–º—ã (GOOGLE_DRIVE, DATABASE, FILE_UPLOAD –∏ —Ç.–¥.)
        """
        error_report = ErrorReport(
            timestamp=datetime.now().isoformat(),
            error_type=error_type,
            error_message=error_message,
            user_id=user_id,
            username=username,
            context=context,
            severity=severity,
            component=component
        )
        
        try:
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—à–∏–±–∫–∏
            with open(self.log_file_path, 'r', encoding='utf-8') as f:
                errors = json.load(f)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ—à–∏–±–∫—É
            errors.append(asdict(error_report))
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000)
            if len(errors) > 1000:
                errors = errors[-1000:]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            with open(self.log_file_path, 'w', encoding='utf-8') as f:
                json.dump(errors, f, ensure_ascii=False, indent=2)
                
            logger.info(f"üìä –û—à–∏–±–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: {error_type} - {error_message[:100]}...")
            
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    def get_error_statistics(self, last_hours: int = 24) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        
        Args:
            last_hours: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
        """
        try:
            with open(self.log_file_path, 'r', encoding='utf-8') as f:
                errors = json.load(f)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            cutoff_time = datetime.now().timestamp() - (last_hours * 3600)
            recent_errors = [
                error for error in errors
                if datetime.fromisoformat(error['timestamp']).timestamp() > cutoff_time
            ]
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = {
                'total_errors': len(recent_errors),
                'by_component': {},
                'by_type': {},
                'by_severity': {},
                'recent_critical': []
            }
            
            for error in recent_errors:
                # –ü–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
                component = error.get('component', 'UNKNOWN')
                stats['by_component'][component] = stats['by_component'].get(component, 0) + 1
                
                # –ü–æ —Ç–∏–ø–∞–º
                error_type = error.get('error_type', 'UNKNOWN')
                stats['by_type'][error_type] = stats['by_type'].get(error_type, 0) + 1
                
                # –ü–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
                severity = error.get('severity', 'ERROR')
                stats['by_severity'][severity] = stats['by_severity'].get(severity, 0) + 1
                
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                if severity == 'CRITICAL':
                    stats['recent_critical'].append(error)
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def log_google_drive_error(self, error_message: str, user_id: int, username: str = None, filename: str = None):
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ Google Drive"""
        context = f"file_upload"
        if filename:
            context += f", filename: {filename}"
            
        severity = "CRITICAL" if "Service Accounts do not have storage quota" in error_message else "ERROR"
        
        self.log_error(
            error_type="GoogleDriveError",
            error_message=error_message,
            user_id=user_id,
            username=username,
            context=context,
            severity=severity,
            component="GOOGLE_DRIVE"
        )
    
    def log_database_error(self, error_message: str, operation: str, user_id: int = None):
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.log_error(
            error_type="DatabaseError",
            error_message=error_message,
            user_id=user_id,
            context=f"operation: {operation}",
            severity="CRITICAL",
            component="DATABASE"
        )
    
    def log_validation_error(self, field: str, value: str, user_id: int, username: str = None):
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        self.log_error(
            error_type="ValidationError",
            error_message=f"Invalid {field}: {value[:50]}...",
            user_id=user_id,
            username=username,
            context=f"field_validation: {field}",
            severity="WARNING",
            component="VALIDATION"
        )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞ –æ—à–∏–±–æ–∫
error_monitor = ErrorMonitor()
