import asyncio
import json
import logging
import os
from pathlib import Path
from typing import Dict, Set, Optional

from aiogram import Bot
from aiogram.types import FSInputFile

logger = logging.getLogger(__name__)


class PhotoFileIdManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å file_id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    
    def __init__(self, bot: Bot, images_dir: str, file_id_storage_path: str, target_chat_id: int):
        self.bot = bot
        self.images_dir = Path(images_dir)
        self.file_id_storage_path = Path(file_id_storage_path)
        self.target_chat_id = target_chat_id
        
    def _get_all_image_files(self) -> Set[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏ images (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏)"""
        image_extensions = {'.png', '.jpg', '.jpeg'}
        image_files = set()
        
        for file_path in self.images_dir.rglob('*'):
            if file_path.is_file() and file_path.suffix.lower() in image_extensions:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –ø–∞–ø–∫–∏ images
                relative_path = file_path.relative_to(self.images_dir)
                image_files.add(str(relative_path))
                
        return image_files
    
    def _load_existing_file_ids(self) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ file_id –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        if self.file_id_storage_path.exists():
            try:
                with open(self.file_id_storage_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except (json.JSONDecodeError, FileNotFoundError) as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å file_id –∏–∑ {self.file_id_storage_path}: {e}")
        return {}
    
    def _save_file_ids(self, file_ids: Dict[str, str]) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å file_id –≤ JSON —Ñ–∞–π–ª"""
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        self.file_id_storage_path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(self.file_id_storage_path, 'w', encoding='utf-8') as f:
            json.dump(file_ids, f, ensure_ascii=False, indent=2)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(file_ids)} file_id –≤ {self.file_id_storage_path}")
    
    async def _send_photo_and_get_file_id(self, image_path: Path) -> Optional[str]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏ –ø–æ–ª—É—á–∏—Ç—å file_id"""
        try:
            photo = FSInputFile(image_path)
            message = await self.bot.send_photo(
                chat_id=self.target_chat_id,
                photo=photo,
                caption=f"üì∏ {image_path.name}"
            )
            
            if message.photo:
                file_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {image_path.name}, file_id: {file_id}")
                return file_id
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å file_id –¥–ª—è {image_path.name}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {image_path.name}: {e}")
            return None
    
    async def check_and_upload_new_photos(self) -> Dict[str, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Ö file_id.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å file_id.
        """
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        all_images = self._get_all_image_files()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ file_id
        existing_file_ids = self._load_existing_file_ids()
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        existing_files = set(existing_file_ids.keys())
        new_files = all_images - existing_files
        
        if not new_files:
            logger.info("‚úÖ –ù–æ–≤—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return existing_file_ids
        
        logger.info(f"üÜï –ù–∞–π–¥–µ–Ω–æ {len(new_files)} –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–æ–ª—É—á–∞–µ–º file_id
        updated_file_ids = existing_file_ids.copy()
        
        for relative_path in new_files:
            full_path = self.images_dir / relative_path
            file_id = await self._send_photo_and_get_file_id(full_path)
            
            if file_id:
                updated_file_ids[relative_path] = file_id
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(0.5)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ file_id
        self._save_file_ids(updated_file_ids)
        
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(new_files)} –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
        return updated_file_ids
    
    async def regenerate_all_file_ids(self) -> Dict[str, str]:
        """
        –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å file_id –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö file_id.
        """
        logger.info("üîÑ –ü–æ–ª–Ω–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è file_id –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        all_images = self._get_all_image_files()
        
        if not all_images:
            logger.warning("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ images")
            return {}
        
        logger.info(f"üì∏ –ù–∞–π–¥–µ–Ω–æ {len(all_images)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        file_ids = {}
        
        for i, relative_path in enumerate(all_images, 1):
            full_path = self.images_dir / relative_path
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {i}/{len(all_images)}: {relative_path}")
            
            file_id = await self._send_photo_and_get_file_id(full_path)
            
            if file_id:
                file_ids[relative_path] = file_id
                
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            await asyncio.sleep(0.5)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ file_id
        self._save_file_ids(file_ids)
        
        logger.info(f"‚úÖ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(file_ids)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
        return file_ids
    
    def get_file_id(self, relative_path: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å file_id –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        file_ids = self._load_existing_file_ids()
        return file_ids.get(relative_path)
    
    def get_all_file_ids(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ file_id"""
        return self._load_existing_file_ids()


async def startup_photo_check(bot: Bot, images_dir: str = "app/bot/assets/images", 
                             target_chat_id: int = 257026813, 
                             file_id_storage_path: str = "config/photo_file_ids.json") -> Dict[str, str]:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞.
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        images_dir: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        target_chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        file_id_storage_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å file_id
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å file_id –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    """
    manager = PhotoFileIdManager(bot, images_dir, file_id_storage_path, target_chat_id)
    return await manager.check_and_upload_new_photos()
