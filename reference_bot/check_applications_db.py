#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –∑–∞—è–≤–æ–∫
"""
import asyncio
import logging
from config.config import load_config
from app.infrastructure.database.connect_to_pg import get_pg_pool

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='#%(levelname)-8s [%(asctime)s] - %(filename)s:%(lineno)d - %(name)s:%(funcName)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def check_applications_db():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ë–î –∑–∞—è–≤–æ–∫"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î –∑–∞—è–≤–æ–∫
        pool = await get_pg_pool(
            db_name=config.db_applications.database,
            host=config.db_applications.host,
            port=config.db_applications.port,
            user=config.db_applications.user,
            password=config.db_applications.password
        )
        
        async with pool.connection() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã applications
            cursor = await conn.execute("""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'applications' 
                ORDER BY ordinal_position;
            """)
            
            columns = await cursor.fetchall()
            logger.info("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã applications:")
            for col in columns:
                logger.info(f"  {col[0]} | {col[1]} | nullable: {col[2]} | default: {col[3]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ (–æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è, –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞)
            cursor = await conn.execute("""
            SELECT 
                user_id, full_name, 
                COALESCE(department_1, 'NULL') as dept1,
                COALESCE(subdepartment_1, 'NULL') as subdept1,
                COALESCE(position_1, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è') as pos1,
                created
            FROM applications 
            ORDER BY created DESC 
            LIMIT 10
        """)
            
            applications = await cursor.fetchall()
        logger.info(f"üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞—è–≤–æ–∫:")
        
        for i, app in enumerate(applications, 1):
            user_id, full_name, dept1, subdept1, pos1, created = app
            dept_display = f"{dept1}" + (f" / {subdept1}" if subdept1 != 'NULL' else "")
            logger.info(f"üìã {i}. User {user_id} ({full_name}): {dept_display} - {pos1} | {created}")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –æ–±–∑–æ—Ä –ø–æ —Ç–∞–±–ª–∏—Ü–µ users
            cursor = await conn.execute("""
                SELECT submission_status, COUNT(*)
                FROM users
                GROUP BY submission_status
                ORDER BY submission_status;
            """)
            groups = await cursor.fetchall()
            logger.info("\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏:")
            for status, cnt in groups:
                logger.info(f"  {status}: {cnt}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î –∑–∞—è–≤–æ–∫: {e}")

if __name__ == "__main__":
    asyncio.run(check_applications_db())
